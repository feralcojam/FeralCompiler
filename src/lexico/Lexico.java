// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/lexico/Lexico.flex

package lexico;
import java_cup.runtime.Symbol;
import sintactico.sym;


@SuppressWarnings("fallthrough")
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\2\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\12\22\1\23"+
    "\1\24\1\25\1\26\1\27\2\0\4\30\1\31\1\32"+
    "\14\30\1\33\7\30\1\34\1\0\1\35\1\0\1\30"+
    "\1\0\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\30\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\30\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\30\1\63\1\30\1\64\1\65\1\66\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\2\23\1\24\1\25"+
    "\16\23\1\26\1\1\1\27\1\30\1\0\1\31\1\32"+
    "\1\0\1\33\1\34\1\35\1\36\2\0\1\37\1\40"+
    "\1\41\1\42\11\23\1\43\5\23\1\44\16\23\1\45"+
    "\1\46\1\47\1\0\1\47\16\23\1\50\1\23\1\51"+
    "\1\23\1\52\16\23\1\53\1\54\1\55\4\23\1\56"+
    "\3\23\2\0\1\57\10\23\1\60\1\61\3\23\1\62"+
    "\4\0\1\63\3\23\1\0\1\64\1\65\1\23\1\66"+
    "\2\0\5\23\1\67\2\23\1\70\1\71\1\23\1\72"+
    "\1\73\2\23\1\74\3\0\1\75\1\0\1\76\3\23"+
    "\1\77\1\100\2\0\1\101\1\102\2\0\1\103\2\0"+
    "\1\23\1\104\2\0\1\105\1\106\1\107\1\0\1\110"+
    "\1\23\1\111\1\112\2\0\1\113\1\114\1\115\1\116"+
    "\1\0\1\117\1\23\2\0\1\120\1\0\1\121\1\122"+
    "\1\123\1\124\1\0\1\125\1\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\67\0\156\0\245\0\334\0\67\0\u0113"+
    "\0\u014a\0\67\0\67\0\67\0\u0181\0\67\0\u01b8\0\67"+
    "\0\67\0\u01ef\0\67\0\67\0\u0226\0\u025d\0\u0294\0\u02cb"+
    "\0\u0302\0\67\0\67\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415"+
    "\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd"+
    "\0\u0604\0\67\0\u063b\0\67\0\67\0\334\0\67\0\67"+
    "\0\u0672\0\67\0\67\0\67\0\67\0\u06a9\0\u06e0\0\67"+
    "\0\67\0\67\0\67\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3"+
    "\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab"+
    "\0\u09e2\0\u0a19\0\u02cb\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c"+
    "\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4"+
    "\0\u0d1b\0\67\0\67\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e"+
    "\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6"+
    "\0\u101d\0\u1054\0\u108b\0\u10c2\0\u02cb\0\u10f9\0\u1130\0\u1167"+
    "\0\u02cb\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8"+
    "\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0"+
    "\0\u02cb\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621"+
    "\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9"+
    "\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u02cb\0\u02cb\0\u1923"+
    "\0\u195a\0\u1991\0\u02cb\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u02cb"+
    "\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u02cb\0\u1b80\0\u1bb7\0\u1bee"+
    "\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6"+
    "\0\u1ddd\0\u1e14\0\u02cb\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27"+
    "\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u02cb\0\u2071\0\u20a8"+
    "\0\u20df\0\u2116\0\u214d\0\u02cb\0\u02cb\0\u2184\0\u21bb\0\u02cb"+
    "\0\u02cb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305\0\u02cb"+
    "\0\u233c\0\u2373\0\67\0\u23aa\0\67\0\u23e1\0\u02cb\0\u2418"+
    "\0\u244f\0\u2486\0\u24bd\0\u24f4\0\67\0\67\0\u02cb\0\u252b"+
    "\0\u2562\0\67\0\u2599\0\u25d0\0\u2607\0\u263e\0\u2675\0\67"+
    "\0\u02cb\0\67\0\67\0\u26ac\0\67\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\3\30"+
    "\1\31\1\32\1\33\1\30\1\34\1\35\1\36\1\37"+
    "\1\40\2\30\1\41\1\30\1\42\1\30\1\43\1\30"+
    "\1\44\1\45\1\46\1\47\1\30\1\50\1\51\1\30"+
    "\1\52\1\53\1\54\71\0\1\3\112\0\1\55\40\0"+
    "\6\56\1\57\60\56\10\0\1\60\56\0\11\61\1\0"+
    "\55\61\15\0\1\62\10\0\1\63\57\0\1\64\6\0"+
    "\1\65\60\0\1\66\1\0\1\22\6\0\1\67\1\70"+
    "\7\0\1\67\1\70\51\0\1\71\66\0\1\72\66\0"+
    "\1\73\62\0\1\30\5\0\4\30\2\0\26\30\25\0"+
    "\1\30\5\0\4\30\2\0\21\30\1\74\4\30\25\0"+
    "\1\30\5\0\4\30\2\0\15\30\1\75\1\30\1\76"+
    "\5\30\1\77\25\0\1\30\5\0\4\30\2\0\1\100"+
    "\6\30\1\101\2\30\1\102\2\30\1\103\10\30\25\0"+
    "\1\30\5\0\4\30\2\0\4\30\1\104\10\30\1\105"+
    "\10\30\25\0\1\30\5\0\4\30\2\0\12\30\1\106"+
    "\13\30\25\0\1\30\5\0\4\30\2\0\1\107\7\30"+
    "\1\110\1\30\1\111\2\30\1\112\10\30\25\0\1\30"+
    "\5\0\4\30\2\0\5\30\1\113\5\30\1\114\1\115"+
    "\11\30\25\0\1\30\5\0\4\30\2\0\15\30\1\116"+
    "\10\30\25\0\1\30\5\0\4\30\2\0\4\30\1\117"+
    "\21\30\25\0\1\30\5\0\4\30\2\0\1\120\16\30"+
    "\1\121\2\30\1\122\3\30\25\0\1\30\5\0\4\30"+
    "\2\0\4\30\1\123\21\30\25\0\1\30\5\0\4\30"+
    "\2\0\7\30\1\124\11\30\1\125\2\30\1\126\1\30"+
    "\25\0\1\30\5\0\4\30\2\0\17\30\1\127\6\30"+
    "\25\0\1\30\5\0\4\30\2\0\15\30\1\130\10\30"+
    "\25\0\1\30\5\0\4\30\2\0\7\30\1\131\16\30"+
    "\70\0\1\132\12\0\1\133\77\0\1\134\61\0\1\135"+
    "\1\0\1\135\2\0\1\136\66\0\1\30\5\0\4\30"+
    "\2\0\17\30\1\137\6\30\25\0\1\30\5\0\4\30"+
    "\2\0\15\30\1\140\10\30\25\0\1\30\5\0\4\30"+
    "\2\0\4\30\1\141\21\30\25\0\1\30\5\0\4\30"+
    "\2\0\21\30\1\142\4\30\25\0\1\30\5\0\4\30"+
    "\2\0\20\30\1\143\5\30\25\0\1\30\5\0\4\30"+
    "\2\0\1\144\25\30\25\0\1\30\5\0\4\30\2\0"+
    "\1\145\25\30\25\0\1\30\5\0\4\30\2\0\14\30"+
    "\1\146\11\30\25\0\1\30\5\0\4\30\2\0\5\30"+
    "\1\147\20\30\25\0\1\30\5\0\4\30\2\0\22\30"+
    "\1\150\3\30\25\0\1\30\5\0\4\30\2\0\20\30"+
    "\1\151\5\30\25\0\1\30\5\0\4\30\2\0\12\30"+
    "\1\152\13\30\25\0\1\30\5\0\4\30\2\0\14\30"+
    "\1\153\11\30\25\0\1\30\5\0\4\30\2\0\15\30"+
    "\1\154\10\30\25\0\1\30\5\0\4\30\2\0\17\30"+
    "\1\155\6\30\25\0\1\30\5\0\4\30\2\0\16\30"+
    "\1\156\7\30\25\0\1\30\5\0\4\30\2\0\21\30"+
    "\1\157\4\30\25\0\1\30\5\0\4\30\2\0\14\30"+
    "\1\160\11\30\25\0\1\30\5\0\4\30\2\0\24\30"+
    "\1\161\1\30\25\0\1\30\5\0\4\30\2\0\2\30"+
    "\1\162\23\30\25\0\1\30\5\0\4\30\2\0\10\30"+
    "\1\163\4\30\1\164\10\30\25\0\1\30\5\0\4\30"+
    "\2\0\1\30\1\165\24\30\25\0\1\30\5\0\4\30"+
    "\2\0\21\30\1\166\4\30\25\0\1\30\5\0\4\30"+
    "\2\0\15\30\1\167\10\30\25\0\1\30\5\0\4\30"+
    "\2\0\1\170\25\30\25\0\1\30\5\0\4\30\2\0"+
    "\10\30\1\171\15\30\25\0\1\30\5\0\4\30\2\0"+
    "\22\30\1\172\3\30\25\0\1\30\5\0\4\30\2\0"+
    "\10\30\1\173\15\30\25\0\1\30\5\0\4\30\2\0"+
    "\10\30\1\174\15\30\25\0\1\134\6\0\1\67\1\70"+
    "\7\0\1\67\1\70\45\0\1\136\66\0\1\136\7\0"+
    "\1\70\10\0\1\70\45\0\1\30\5\0\4\30\2\0"+
    "\10\30\1\175\15\30\25\0\1\30\5\0\4\30\2\0"+
    "\12\30\1\176\13\30\25\0\1\30\5\0\4\30\2\0"+
    "\1\177\25\30\25\0\1\30\5\0\4\30\2\0\4\30"+
    "\1\200\21\30\25\0\1\30\5\0\4\30\2\0\4\30"+
    "\1\201\21\30\25\0\1\30\5\0\4\30\2\0\17\30"+
    "\1\202\6\30\25\0\1\30\5\0\4\30\2\0\20\30"+
    "\1\203\5\30\25\0\1\30\5\0\4\30\2\0\21\30"+
    "\1\204\4\30\25\0\1\30\5\0\4\30\2\0\1\205"+
    "\25\30\25\0\1\30\5\0\4\30\2\0\1\30\1\206"+
    "\24\30\25\0\1\30\5\0\4\30\2\0\4\30\1\207"+
    "\21\30\25\0\1\30\5\0\4\30\2\0\20\30\1\172"+
    "\5\30\25\0\1\30\5\0\4\30\2\0\1\210\25\30"+
    "\25\0\1\30\5\0\4\30\2\0\1\211\25\30\25\0"+
    "\1\30\5\0\4\30\2\0\15\30\1\212\10\30\7\0"+
    "\1\213\15\0\1\30\5\0\4\30\1\214\1\0\26\30"+
    "\25\0\1\30\5\0\4\30\2\0\6\30\1\215\17\30"+
    "\25\0\1\30\5\0\4\30\2\0\11\30\1\216\14\30"+
    "\25\0\1\30\5\0\4\30\2\0\23\30\1\217\2\30"+
    "\25\0\1\30\5\0\4\30\2\0\21\30\1\220\4\30"+
    "\25\0\1\30\5\0\4\30\2\0\12\30\1\221\13\30"+
    "\25\0\1\30\5\0\4\30\2\0\22\30\1\222\3\30"+
    "\25\0\1\30\5\0\4\30\2\0\17\30\1\223\6\30"+
    "\25\0\1\30\5\0\4\30\2\0\21\30\1\224\4\30"+
    "\25\0\1\30\5\0\4\30\2\0\21\30\1\225\4\30"+
    "\25\0\1\30\5\0\4\30\2\0\4\30\1\226\21\30"+
    "\25\0\1\30\5\0\4\30\2\0\3\30\1\227\22\30"+
    "\25\0\1\30\5\0\4\30\2\0\12\30\1\230\13\30"+
    "\25\0\1\30\5\0\4\30\2\0\14\30\1\231\11\30"+
    "\25\0\1\30\5\0\4\30\2\0\4\30\1\232\21\30"+
    "\25\0\1\30\5\0\4\30\2\0\11\30\1\233\14\30"+
    "\7\0\1\234\15\0\1\30\5\0\4\30\1\235\1\0"+
    "\26\30\7\0\1\236\15\0\1\30\5\0\4\30\1\237"+
    "\1\0\26\30\25\0\1\30\5\0\4\30\2\0\20\30"+
    "\1\240\5\30\25\0\1\30\5\0\4\30\2\0\10\30"+
    "\1\241\15\30\25\0\1\30\5\0\4\30\2\0\22\30"+
    "\1\242\3\30\25\0\1\30\5\0\4\30\2\0\12\30"+
    "\1\243\13\30\7\0\1\244\15\0\1\30\5\0\4\30"+
    "\2\0\26\30\25\0\1\30\5\0\4\30\2\0\12\30"+
    "\1\245\13\30\25\0\1\30\5\0\4\30\2\0\21\30"+
    "\1\246\4\30\25\0\1\30\5\0\4\30\2\0\17\30"+
    "\1\247\6\30\37\0\1\214\67\0\1\250\35\0\1\251"+
    "\15\0\1\30\5\0\4\30\1\252\1\0\26\30\25\0"+
    "\1\30\5\0\4\30\2\0\1\253\25\30\25\0\1\30"+
    "\5\0\4\30\2\0\1\254\25\30\25\0\1\30\5\0"+
    "\4\30\2\0\4\30\1\255\21\30\25\0\1\30\5\0"+
    "\4\30\2\0\10\30\1\256\15\30\25\0\1\30\5\0"+
    "\4\30\2\0\17\30\1\257\6\30\25\0\1\30\5\0"+
    "\4\30\2\0\21\30\1\260\4\30\25\0\1\30\5\0"+
    "\4\30\2\0\10\30\1\261\15\30\25\0\1\30\5\0"+
    "\4\30\2\0\2\30\1\262\23\30\25\0\1\30\5\0"+
    "\4\30\2\0\4\30\1\263\21\30\25\0\1\30\5\0"+
    "\4\30\2\0\6\30\1\264\17\30\25\0\1\30\5\0"+
    "\4\30\2\0\1\265\25\30\37\0\1\235\67\0\1\266"+
    "\65\0\1\237\67\0\1\267\53\0\1\30\5\0\4\30"+
    "\2\0\14\30\1\270\11\30\25\0\1\30\5\0\4\30"+
    "\2\0\12\30\1\271\13\30\25\0\1\30\5\0\4\30"+
    "\2\0\4\30\1\272\21\30\51\0\1\273\24\0\1\274"+
    "\15\0\1\30\5\0\4\30\1\275\1\0\26\30\25\0"+
    "\1\30\5\0\4\30\2\0\21\30\1\276\4\30\37\0"+
    "\1\277\66\0\1\252\67\0\1\300\53\0\1\30\5\0"+
    "\4\30\2\0\6\30\1\301\17\30\25\0\1\30\5\0"+
    "\4\30\2\0\21\30\1\302\4\30\25\0\1\30\5\0"+
    "\4\30\2\0\2\30\1\303\23\30\25\0\1\30\5\0"+
    "\4\30\2\0\2\30\1\304\23\30\25\0\1\30\5\0"+
    "\4\30\2\0\14\30\1\305\11\30\7\0\1\306\15\0"+
    "\1\30\5\0\4\30\1\307\1\0\26\30\25\0\1\30"+
    "\5\0\4\30\2\0\2\30\1\310\23\30\25\0\1\30"+
    "\5\0\4\30\2\0\7\30\1\311\16\30\7\0\1\312"+
    "\15\0\1\30\5\0\4\30\1\313\1\0\26\30\25\0"+
    "\1\30\5\0\4\30\2\0\14\30\1\314\11\30\37\0"+
    "\1\315\66\0\1\316\54\0\1\30\5\0\4\30\2\0"+
    "\22\30\1\317\3\30\25\0\1\30\5\0\4\30\2\0"+
    "\21\30\1\320\4\30\7\0\1\321\15\0\1\30\5\0"+
    "\4\30\1\322\1\0\26\30\46\0\1\323\57\0\1\275"+
    "\67\0\1\324\66\0\1\325\65\0\1\326\54\0\1\30"+
    "\5\0\4\30\2\0\4\30\1\276\21\30\25\0\1\30"+
    "\5\0\4\30\2\0\4\30\1\327\21\30\25\0\1\30"+
    "\5\0\4\30\2\0\21\30\1\330\4\30\37\0\1\307"+
    "\67\0\1\331\65\0\1\313\67\0\1\332\35\0\1\333"+
    "\15\0\1\30\5\0\4\30\1\334\1\0\26\30\40\0"+
    "\1\335\66\0\1\336\53\0\1\30\5\0\4\30\2\0"+
    "\4\30\1\337\21\30\37\0\1\322\67\0\1\340\65\0"+
    "\1\341\67\0\1\342\53\0\1\30\5\0\4\30\2\0"+
    "\4\30\1\343\21\30\37\0\1\344\66\0\1\345\66\0"+
    "\1\334\67\0\1\346\65\0\1\347\67\0\1\350\53\0"+
    "\1\30\5\0\4\30\2\0\3\30\1\351\22\30\40\0"+
    "\1\352\66\0\1\353\65\0\1\354\67\0\1\355\66\0"+
    "\1\356\31\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9955];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\1\11\2\1\3\11\1\1\1\11"+
    "\1\1\2\11\1\1\2\11\5\1\2\11\16\1\1\11"+
    "\1\1\2\11\1\0\2\11\1\0\4\11\2\0\4\11"+
    "\36\1\2\11\1\1\1\0\55\1\2\0\17\1\4\0"+
    "\4\1\1\0\4\1\2\0\20\1\3\0\1\1\1\0"+
    "\6\1\2\0\2\1\2\0\1\1\2\0\2\1\2\0"+
    "\1\11\1\1\1\11\1\0\4\1\2\0\2\11\2\1"+
    "\1\0\1\11\1\1\2\0\1\1\1\0\1\11\1\1"+
    "\2\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private java.util.ArrayList<String> tokens = new java.util.ArrayList<>();
    public java.util.List<String> obtenerTokens() { return tokens; }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Caracter desconocido: " + yytext());
            }
          // fall through
          case 87: break;
          case 2:
            { 
            }
          // fall through
          case 88: break;
          case 3:
            { tokens.add("OPERADOR_NOT: " + yytext()); 
        return new Symbol(sym.OPERADOR_NOT, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 89: break;
          case 4:
            { tokens.add("OPERADOR_MODULO: " + yytext()); 
        return new Symbol(sym.OPERADOR_MODULO, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 90: break;
          case 5:
            { tokens.add("PARENTESIS_ABIERTO: " + yytext()); 
        return new Symbol(sym.PARENTESIS_ABIERTO, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 91: break;
          case 6:
            { tokens.add("PARENTESIS_CERRADO: " + yytext()); 
        return new Symbol(sym.PARENTESIS_CERRADO, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 92: break;
          case 7:
            { tokens.add("OPERADOR_POR: " + yytext()); 
        return new Symbol(sym.OPERADOR_POR, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 93: break;
          case 8:
            { tokens.add("OPERADOR_MAS: " + yytext()); 
        return new Symbol(sym.OPERADOR_MAS, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 94: break;
          case 9:
            { tokens.add("SIGNO_COMA: " + yytext()); 
        return new Symbol(sym.SIGNO_COMA, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 95: break;
          case 10:
            { tokens.add("OPERADOR_MENOS: " + yytext()); 
        return new Symbol(sym.OPERADOR_MENOS, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 96: break;
          case 11:
            { tokens.add("SIGNO_PUNTO: " + yytext()); 
        return new Symbol(sym.SIGNO_PUNTO, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 97: break;
          case 12:
            { tokens.add("OPERADOR_ENTRE: " + yytext()); 
        return new Symbol(sym.OPERADOR_ENTRE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 98: break;
          case 13:
            { tokens.add("NUMERO: " + yytext()); 
        return new Symbol(sym.NUMERO, yyline + 1, yycolumn + 1, Integer.parseInt(yytext()));
            }
          // fall through
          case 99: break;
          case 14:
            { tokens.add("SIGNO_DOS_PUNTOS: " + yytext()); 
        return new Symbol(sym.SIGNO_DOS_PUNTOS, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 100: break;
          case 15:
            { tokens.add("SIGNO_PUNTO_Y_COMA: " + yytext()); 
        return new Symbol(sym.SIGNO_PUNTO_Y_COMA, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 101: break;
          case 16:
            { tokens.add("OPERADOR_MENOR_QUE: " + yytext()); 
        return new Symbol(sym.OPERADOR_MENOR_QUE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 102: break;
          case 17:
            { tokens.add("OPERADOR_DE_ASIGNACION: " + yytext()); 
        return new Symbol(sym.OPERADOR_DE_ASIGNACION, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 103: break;
          case 18:
            { tokens.add("OPERADOR_MAYOR_QUE: " + yytext()); 
        return new Symbol(sym.OPERADOR_MAYOR_QUE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 104: break;
          case 19:
            { tokens.add("IDENTIFICADOR: " + yytext()); 
        return new Symbol(sym.IDENTIFICADOR, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 105: break;
          case 20:
            { tokens.add("CORCHETE_ABIERTO: " + yytext()); 
        return new Symbol(sym.CORCHETE_ABIERTO, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 106: break;
          case 21:
            { tokens.add("CORCHETE_CERRADO: " + yytext()); 
        return new Symbol(sym.CORCHETE_CERRADO, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 107: break;
          case 22:
            { tokens.add("LLAVE_ABIERTA: " + yytext()); 
        return new Symbol(sym.LLAVE_ABIERTA, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 108: break;
          case 23:
            { tokens.add("LLAVE_CERRADA: " + yytext()); 
        return new Symbol(sym.LLAVE_CERRADA, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 109: break;
          case 24:
            { tokens.add("OPERADOR_DIFERENTE_DE: " + yytext()); 
        return new Symbol(sym.OPERADOR_DIFERENTE_DE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 110: break;
          case 25:
            { tokens.add("CADENA: " + yytext());
        return new Symbol(sym.CADENA, yyline + 1, yycolumn + 1, yytext().substring(1, yytext().length() - 1));
            }
          // fall through
          case 111: break;
          case 26:
            { tokens.add("OPERADOR_AND: " + yytext()); 
        return new Symbol(sym.OPERADOR_AND, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 112: break;
          case 27:
            { tokens.add("OPERADOR_INCREMENTO: " + yytext()); 
        return new Symbol(sym.OPERADOR_INCREMENTO, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 113: break;
          case 28:
            { tokens.add("OPERADOR_DE_ADICION: " + yytext()); 
        return new Symbol(sym.OPERADOR_DE_ADICION, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 114: break;
          case 29:
            { tokens.add("OPERADOR_DECREMENTO: " + yytext()); 
        return new Symbol(sym.OPERADOR_DECREMENTO, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 115: break;
          case 30:
            { tokens.add("OPERADOR_DE_SUSTRACCION: " + yytext()); 
        return new Symbol(sym.OPERADOR_DE_SUSTRACCION, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 116: break;
          case 31:
            { tokens.add("NUMERO_FLOTANTE: " + yytext()); 
        return new Symbol(sym.NUMERO_FLOTANTE, yyline + 1, yycolumn + 1, Float.parseFloat(yytext()));
            }
          // fall through
          case 117: break;
          case 32:
            { tokens.add("OPERADOR_MENOR_IGUAL: " + yytext()); 
        return new Symbol(sym.OPERADOR_MENOR_IGUAL, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 118: break;
          case 33:
            { tokens.add("OPERADOR_IGUAL_A: " + yytext()); 
        return new Symbol(sym.OPERADOR_IGUAL_A, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 119: break;
          case 34:
            { tokens.add("OPERADOR_MAYOR_IGUAL: " + yytext()); 
        return new Symbol(sym.OPERADOR_MAYOR_IGUAL, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 120: break;
          case 35:
            { tokens.add("CICLO_DO: " + yytext()); 
        return new Symbol(sym.CICLO_DO, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 121: break;
          case 36:
            { tokens.add("SENTENCIA_IF: " + yytext()); 
        return new Symbol(sym.SENTENCIA_IF, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 122: break;
          case 37:
            { tokens.add("OPERADOR_OR: " + yytext()); 
        return new Symbol(sym.OPERADOR_OR, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 123: break;
          case 38:
            { tokens.add("VALOR_CARACTER: " + yytext());
        return new Symbol(sym.VALOR_CARACTER, yyline + 1, yycolumn + 1, yytext().charAt(1));
            }
          // fall through
          case 124: break;
          case 39:
            { tokens.add("NUMERO_DOUBLE: " + yytext()); 
        return new Symbol(sym.NUMERO_DOUBLE, yyline + 1, yycolumn + 1, Double.parseDouble(yytext()));
            }
          // fall through
          case 125: break;
          case 40:
            { tokens.add("CICLO_FOR: " + yytext()); 
        return new Symbol(sym.CICLO_FOR, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 126: break;
          case 41:
            { tokens.add("INT: " + yytext()); 
        return new Symbol(sym.INT, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 127: break;
          case 42:
            { tokens.add("RESERVADA_NEW: " + yytext()); 
        return new Symbol(sym.RESERVADA_NEW, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 128: break;
          case 43:
            { tokens.add("BYTE: " + yytext()); 
        return new Symbol(sym.BYTE, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 129: break;
          case 44:
            { tokens.add("SENTENCIA_CASE: " + yytext()); 
        return new Symbol(sym.SENTENCIA_CASE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 130: break;
          case 45:
            { tokens.add("CARACTER: " + yytext()); 
        return new Symbol(sym.CARACTER, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 131: break;
          case 46:
            { tokens.add("SENTENCIA_ELSE: " + yytext()); 
        return new Symbol(sym.SENTENCIA_ELSE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 132: break;
          case 47:
            { tokens.add("LONG: " + yytext()); 
        return new Symbol(sym.LONG, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 133: break;
          case 48:
            { tokens.add("VALOR_BOOLEANO: " + yytext());
        return new Symbol(sym.VALOR_BOOLEANO, yyline + 1, yycolumn + 1, Boolean.parseBoolean(yytext()));
            }
          // fall through
          case 134: break;
          case 49:
            { tokens.add("RESERVADA_VOID: " + yytext()); 
        return new Symbol(sym.RESERVADA_VOID, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 135: break;
          case 50:
            { tokens.add("SENTENCIA_BREAK: " + yytext()); 
        return new Symbol(sym.SENTENCIA_BREAK, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 136: break;
          case 51:
            { tokens.add("RESERVADA_CLASS: " + yytext()); 
        return new Symbol(sym.RESERVADA_CLASS, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 137: break;
          case 52:
            { tokens.add("RESERVADA_FINAL: " + yytext()); 
        return new Symbol(sym.RESERVADA_FINAL, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 138: break;
          case 53:
            { tokens.add("FLOAT: " + yytext()); 
        return new Symbol(sym.FLOAT, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 139: break;
          case 54:
            { tokens.add("ARREGLO_INT: " + yytext());
    return new Symbol(sym.ARREGLO_INT, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 140: break;
          case 55:
            { tokens.add("SHORT: " + yytext()); 
        return new Symbol(sym.SHORT, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 141: break;
          case 56:
            { tokens.add("CICLO_WHILE: " + yytext()); 
        return new Symbol(sym.CICLO_WHILE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 142: break;
          case 57:
            { tokens.add("STRING: " + yytext()); 
        return new Symbol(sym.STRING, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 143: break;
          case 58:
            { tokens.add("ARREGLO_BYTE: " + yytext());
    return new Symbol(sym.ARREGLO_BYTE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 144: break;
          case 59:
            { tokens.add("ARREGLO_CARACTER: " + yytext());
    return new Symbol(sym.ARREGLO_CARACTER, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 145: break;
          case 60:
            { tokens.add("DOUBLE: " + yytext()); 
        return new Symbol(sym.DOUBLE, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 146: break;
          case 61:
            { tokens.add("RESERVADA_IMPORT: " + yytext()); 
        return new Symbol(sym.RESERVADA_IMPORT, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 147: break;
          case 62:
            { tokens.add("ARREGLO_LONG: " + yytext());
    return new Symbol(sym.ARREGLO_LONG, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 148: break;
          case 63:
            { tokens.add("RESERVADA_PUBLIC: " + yytext()); 
        return new Symbol(sym.RESERVADA_PUBLIC, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 149: break;
          case 64:
            { tokens.add("RESERVADA_RETURN: " + yytext()); 
        return new Symbol(sym.RESERVADA_RETURN, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 150: break;
          case 65:
            { tokens.add("RESERVADA_STATIC: " + yytext()); 
        return new Symbol(sym.RESERVADA_STATIC, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 151: break;
          case 66:
            { tokens.add("SENTENCIA_SWITCH: " + yytext()); 
        return new Symbol(sym.SENTENCIA_SWITCH, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 152: break;
          case 67:
            { tokens.add("BOOLEANO: " + yytext()); 
        return new Symbol(sym.BOOLEANO, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 153: break;
          case 68:
            { tokens.add("SENTENCIA_DEFAULT: " + yytext()); 
        return new Symbol(sym.SENTENCIA_DEFAULT, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 154: break;
          case 69:
            { tokens.add("SENTENCIA_ELSE_IF: " + yytext()); 
        return new Symbol(sym.SENTENCIA_ELSE_IF, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 155: break;
          case 70:
            { tokens.add("ARREGLO_FLOAT: " + yytext());
    return new Symbol(sym.ARREGLO_FLOAT, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 156: break;
          case 71:
            { tokens.add("MATRIZ_INT: " + yytext());
    return new Symbol(sym.MATRIZ_INT, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 157: break;
          case 72:
            { tokens.add("RESERVADA_PRIVATE: " + yytext()); 
        return new Symbol(sym.RESERVADA_PRIVATE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 158: break;
          case 73:
            { tokens.add("ARREGLO_SHORT: " + yytext());
    return new Symbol(sym.ARREGLO_SHORT, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 159: break;
          case 74:
            { tokens.add("ARREGLO_STRING: " + yytext());
    return new Symbol(sym.ARREGLO_STRING, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 160: break;
          case 75:
            { tokens.add("MATRIZ_BYTE: " + yytext());
    return new Symbol(sym.MATRIZ_BYTE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 161: break;
          case 76:
            { tokens.add("MATRIZ_CARACTER: " + yytext());
    return new Symbol(sym.MATRIZ_CARACTER, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 162: break;
          case 77:
            { tokens.add("SENTENCIA_CONTINUE: " + yytext()); 
        return new Symbol(sym.SENTENCIA_CONTINUE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 163: break;
          case 78:
            { tokens.add("ARREGLO_DOUBLE: " + yytext());
    return new Symbol(sym.ARREGLO_DOUBLE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 164: break;
          case 79:
            { tokens.add("MATRIZ_LONG: " + yytext());
    return new Symbol(sym.MATRIZ_LONG, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 165: break;
          case 80:
            { tokens.add("ARREGLO_BOOLEANO: " + yytext());
    return new Symbol(sym.ARREGLO_BOOLEANO, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 166: break;
          case 81:
            { tokens.add("MATRIZ_FLOAT: " + yytext());
    return new Symbol(sym.MATRIZ_FLOAT, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 167: break;
          case 82:
            { tokens.add("RESERVADA_PROTECTED: " + yytext()); 
        return new Symbol(sym.RESERVADA_PROTECTED, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 168: break;
          case 83:
            { tokens.add("MATRIZ_SHORT: " + yytext());
    return new Symbol(sym.MATRIZ_SHORT, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 169: break;
          case 84:
            { tokens.add("MATRIZ_STRING: " + yytext());
    return new Symbol(sym.MATRIZ_STRING, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 170: break;
          case 85:
            { tokens.add("MATRIZ_DOUBLE: " + yytext());
    return new Symbol(sym.MATRIZ_DOUBLE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 171: break;
          case 86:
            { tokens.add("MATRIZ_BOOLEANO: " + yytext());
    return new Symbol(sym.MATRIZ_BOOLEANO, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
