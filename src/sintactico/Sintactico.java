
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\006\010\000\002\006\010\000\002\006\010" +
    "\000\002\006\007\000\002\006\010\000\002\006\010\000" +
    "\002\006\010\000\002\006\007\000\002\007\015\000\002" +
    "\010\014\000\002\010\014\000\002\010\014\000\002\010" +
    "\014\000\002\010\014\000\002\010\014\000\002\010\013" +
    "\000\002\010\013\000\002\011\006\000\002\011\007\000" +
    "\002\011\007\000\002\011\007\000\002\011\007\000\002" +
    "\011\007\000\002\011\007\000\002\011\007\000\002\012" +
    "\004\000\002\012\006\000\002\012\004\000\002\012\006" +
    "\000\002\012\004\000\002\012\006\000\002\013\003\000" +
    "\002\013\003\000\002\014\007\000\002\014\007\000\002" +
    "\014\007\000\002\014\007\000\002\014\007\000\002\014" +
    "\007\000\002\014\007\000\002\014\007\000\002\014\007" +
    "\000\002\014\013\000\002\014\013\000\002\014\013\000" +
    "\002\014\013\000\002\014\013\000\002\014\013\000\002" +
    "\014\013\000\002\014\013\000\002\014\013\000\002\014" +
    "\016\000\002\014\016\000\002\014\016\000\002\014\016" +
    "\000\002\014\016\000\002\014\016\000\002\014\016\000" +
    "\002\014\016\000\002\014\016\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017e\000\012\104\004\105\006\106\010\111\007\001" +
    "\002\000\004\111\u017a\001\002\000\004\002\u0179\001\002" +
    "\000\004\111\u0172\001\002\000\004\015\u016c\001\002\000" +
    "\004\111\012\001\002\000\004\002\001\001\002\000\004" +
    "\015\013\001\002\000\004\127\014\001\002\000\014\104" +
    "\015\105\017\106\020\107\021\110\022\001\002\000\006" +
    "\107\u0151\110\u0152\001\002\000\004\130\u0150\001\002\000" +
    "\006\107\u013e\110\u013f\001\002\000\006\107\u012c\110\u012d" +
    "\001\002\000\004\110\u0124\001\002\000\004\107\025\001" +
    "\002\000\004\130\024\001\002\000\004\002\uffe2\001\002" +
    "\000\004\112\026\001\002\000\004\015\027\001\002\000" +
    "\004\123\030\001\002\000\004\124\031\001\002\000\004" +
    "\127\032\001\002\000\070\004\040\005\063\006\037\007" +
    "\033\010\060\011\070\012\047\013\051\014\054\024\053" +
    "\025\064\026\065\027\046\030\061\031\044\032\056\033" +
    "\062\034\050\035\035\036\055\037\057\040\066\041\043" +
    "\042\042\043\067\044\034\045\045\001\002\000\004\015" +
    "\u011f\001\002\000\004\015\u0113\001\002\000\004\015\u0107" +
    "\001\002\000\004\130\uffc5\001\002\000\004\015\u0102\001" +
    "\002\000\004\015\375\001\002\000\004\130\374\001\002" +
    "\000\004\015\360\001\002\000\004\015\344\001\002\000" +
    "\004\015\333\001\002\000\004\015\317\001\002\000\004" +
    "\015\306\001\002\000\004\015\301\001\002\000\004\015" +
    "\270\001\002\000\004\015\263\001\002\000\004\130\uffc4" +
    "\001\002\000\004\015\252\001\002\000\004\015\245\001" +
    "\002\000\004\015\231\001\002\000\004\015\220\001\002" +
    "\000\004\015\204\001\002\000\004\015\177\001\002\000" +
    "\004\015\166\001\002\000\004\015\155\001\002\000\004" +
    "\015\150\001\002\000\004\015\137\001\002\000\004\015" +
    "\126\001\002\000\004\015\112\001\002\000\004\015\076" +
    "\001\002\000\004\015\071\001\002\000\006\055\073\121" +
    "\072\001\002\000\004\130\uffa3\001\002\000\004\020\074" +
    "\001\002\000\004\121\075\001\002\000\004\130\uffbe\001" +
    "\002\000\006\055\100\121\077\001\002\000\004\130\uff90" +
    "\001\002\000\004\116\101\001\002\000\004\012\102\001" +
    "\002\000\004\125\103\001\002\000\004\016\104\001\002" +
    "\000\004\126\105\001\002\000\004\125\106\001\002\000" +
    "\004\016\107\001\002\000\004\126\110\001\002\000\004" +
    "\121\111\001\002\000\004\130\uffab\001\002\000\006\055" +
    "\114\121\113\001\002\000\004\130\uff93\001\002\000\004" +
    "\116\115\001\002\000\004\007\116\001\002\000\004\125" +
    "\117\001\002\000\004\016\120\001\002\000\004\126\121" +
    "\001\002\000\004\125\122\001\002\000\004\016\123\001" +
    "\002\000\004\126\124\001\002\000\004\121\125\001\002" +
    "\000\004\130\uffae\001\002\000\006\055\130\121\127\001" +
    "\002\000\004\130\uff9d\001\002\000\004\116\131\001\002" +
    "\000\004\006\132\001\002\000\004\125\133\001\002\000" +
    "\004\016\134\001\002\000\004\126\135\001\002\000\004" +
    "\121\136\001\002\000\004\130\uffb8\001\002\000\006\055" +
    "\141\121\140\001\002\000\004\130\uff9e\001\002\000\004" +
    "\116\142\001\002\000\004\005\143\001\002\000\004\125" +
    "\144\001\002\000\004\016\145\001\002\000\004\126\146" +
    "\001\002\000\004\121\147\001\002\000\004\130\uffb9\001" +
    "\002\000\006\055\152\121\151\001\002\000\004\130\uffa7" +
    "\001\002\000\004\016\153\001\002\000\004\121\154\001" +
    "\002\000\004\130\uffc2\001\002\000\006\055\157\121\156" +
    "\001\002\000\004\130\uff98\001\002\000\004\116\160\001" +
    "\002\000\004\013\161\001\002\000\004\125\162\001\002" +
    "\000\004\016\163\001\002\000\004\126\164\001\002\000" +
    "\004\121\165\001\002\000\004\130\uffb3\001\002\000\006" +
    "\055\170\121\167\001\002\000\004\130\uff9b\001\002\000" +
    "\004\116\171\001\002\000\004\010\172\001\002\000\004" +
    "\125\173\001\002\000\004\016\174\001\002\000\004\126" +
    "\175\001\002\000\004\121\176\001\002\000\004\130\uffb6" +
    "\001\002\000\006\055\201\121\200\001\002\000\004\130" +
    "\uffa4\001\002\000\004\017\202\001\002\000\004\121\203" +
    "\001\002\000\004\130\uffbf\001\002\000\006\055\206\121" +
    "\205\001\002\000\004\130\uff94\001\002\000\004\116\207" +
    "\001\002\000\004\006\210\001\002\000\004\125\211\001" +
    "\002\000\004\016\212\001\002\000\004\126\213\001\002" +
    "\000\004\125\214\001\002\000\004\016\215\001\002\000" +
    "\004\126\216\001\002\000\004\121\217\001\002\000\004" +
    "\130\uffaf\001\002\000\006\055\222\121\221\001\002\000" +
    "\004\130\uff99\001\002\000\004\116\223\001\002\000\004" +
    "\012\224\001\002\000\004\125\225\001\002\000\004\016" +
    "\226\001\002\000\004\126\227\001\002\000\004\121\230" +
    "\001\002\000\004\130\uffb4\001\002\000\006\055\233\121" +
    "\232\001\002\000\004\130\uff95\001\002\000\004\116\234" +
    "\001\002\000\004\005\235\001\002\000\004\125\236\001" +
    "\002\000\004\016\237\001\002\000\004\126\240\001\002" +
    "\000\004\125\241\001\002\000\004\016\242\001\002\000" +
    "\004\126\243\001\002\000\004\121\244\001\002\000\004" +
    "\130\uffb0\001\002\000\006\055\247\121\246\001\002\000" +
    "\004\130\uffa0\001\002\000\004\023\250\001\002\000\004" +
    "\121\251\001\002\000\004\130\uffbb\001\002\000\006\055" +
    "\254\121\253\001\002\000\004\130\uff9f\001\002\000\004" +
    "\116\255\001\002\000\004\004\256\001\002\000\004\125" +
    "\257\001\002\000\004\016\260\001\002\000\004\126\261" +
    "\001\002\000\004\121\262\001\002\000\004\130\uffba\001" +
    "\002\000\006\055\265\121\264\001\002\000\004\130\uffa1" +
    "\001\002\000\004\022\266\001\002\000\004\121\267\001" +
    "\002\000\004\130\uffbc\001\002\000\006\055\272\121\271" +
    "\001\002\000\004\130\uff97\001\002\000\004\116\273\001" +
    "\002\000\004\014\274\001\002\000\004\125\275\001\002" +
    "\000\004\016\276\001\002\000\004\126\277\001\002\000" +
    "\004\121\300\001\002\000\004\130\uffb2\001\002\000\006" +
    "\055\303\121\302\001\002\000\004\130\uffa2\001\002\000" +
    "\004\021\304\001\002\000\004\121\305\001\002\000\004" +
    "\130\uffbd\001\002\000\006\055\310\121\307\001\002\000" +
    "\004\130\uff9c\001\002\000\004\116\311\001\002\000\004" +
    "\007\312\001\002\000\004\125\313\001\002\000\004\016" +
    "\314\001\002\000\004\126\315\001\002\000\004\121\316" +
    "\001\002\000\004\130\uffb7\001\002\000\006\055\321\121" +
    "\320\001\002\000\004\130\uff8e\001\002\000\004\116\322" +
    "\001\002\000\004\014\323\001\002\000\004\125\324\001" +
    "\002\000\004\016\325\001\002\000\004\126\326\001\002" +
    "\000\004\125\327\001\002\000\004\016\330\001\002\000" +
    "\004\126\331\001\002\000\004\121\332\001\002\000\004" +
    "\130\uffa9\001\002\000\006\055\335\121\334\001\002\000" +
    "\004\130\uff9a\001\002\000\004\116\336\001\002\000\004" +
    "\011\337\001\002\000\004\125\340\001\002\000\004\016" +
    "\341\001\002\000\004\126\342\001\002\000\004\121\343" +
    "\001\002\000\004\130\uffb5\001\002\000\006\055\346\121" +
    "\345\001\002\000\004\130\uff92\001\002\000\004\116\347" +
    "\001\002\000\004\010\350\001\002\000\004\125\351\001" +
    "\002\000\004\016\352\001\002\000\004\126\353\001\002" +
    "\000\004\125\354\001\002\000\004\016\355\001\002\000" +
    "\004\126\356\001\002\000\004\121\357\001\002\000\004" +
    "\130\uffad\001\002\000\006\055\362\121\361\001\002\000" +
    "\004\130\uff91\001\002\000\004\116\363\001\002\000\004" +
    "\011\364\001\002\000\004\125\365\001\002\000\004\016" +
    "\366\001\002\000\004\126\367\001\002\000\004\125\370" +
    "\001\002\000\004\016\371\001\002\000\004\126\372\001" +
    "\002\000\004\121\373\001\002\000\004\130\uffac\001\002" +
    "\000\004\130\uffd5\001\002\000\006\055\377\121\376\001" +
    "\002\000\004\130\uffa8\001\002\000\004\016\u0100\001\002" +
    "\000\004\121\u0101\001\002\000\004\130\uffc3\001\002\000" +
    "\006\055\u0104\121\u0103\001\002\000\004\130\uffa6\001\002" +
    "\000\004\016\u0105\001\002\000\004\121\u0106\001\002\000" +
    "\004\130\uffc1\001\002\000\006\055\u0109\121\u0108\001\002" +
    "\000\004\130\uff96\001\002\000\004\116\u010a\001\002\000" +
    "\004\004\u010b\001\002\000\004\125\u010c\001\002\000\004" +
    "\016\u010d\001\002\000\004\126\u010e\001\002\000\004\125" +
    "\u010f\001\002\000\004\016\u0110\001\002\000\004\126\u0111" +
    "\001\002\000\004\121\u0112\001\002\000\004\130\uffb1\001" +
    "\002\000\006\055\u0115\121\u0114\001\002\000\004\130\uff8f" +
    "\001\002\000\004\116\u0116\001\002\000\004\013\u0117\001" +
    "\002\000\004\125\u0118\001\002\000\004\016\u0119\001\002" +
    "\000\004\126\u011a\001\002\000\004\125\u011b\001\002\000" +
    "\004\016\u011c\001\002\000\004\126\u011d\001\002\000\004" +
    "\121\u011e\001\002\000\004\130\uffaa\001\002\000\006\055" +
    "\u0121\121\u0120\001\002\000\004\130\uffa5\001\002\000\004" +
    "\016\u0122\001\002\000\004\121\u0123\001\002\000\004\130" +
    "\uffc0\001\002\000\004\112\u0125\001\002\000\004\015\u0126" +
    "\001\002\000\004\123\u0127\001\002\000\004\124\u0128\001" +
    "\002\000\004\127\u0129\001\002\000\070\004\040\005\063" +
    "\006\037\007\033\010\060\011\070\012\047\013\051\014" +
    "\054\024\053\025\064\026\065\027\046\030\061\031\044" +
    "\032\056\033\062\034\050\035\035\036\055\037\057\040" +
    "\066\041\043\042\042\043\067\044\034\045\045\001\002" +
    "\000\004\130\u012b\001\002\000\004\130\uffd4\001\002\000" +
    "\004\110\u0136\001\002\000\004\107\u012e\001\002\000\004" +
    "\112\u012f\001\002\000\004\015\u0130\001\002\000\004\123" +
    "\u0131\001\002\000\004\124\u0132\001\002\000\004\127\u0133" +
    "\001\002\000\070\004\040\005\063\006\037\007\033\010" +
    "\060\011\070\012\047\013\051\014\054\024\053\025\064" +
    "\026\065\027\046\030\061\031\044\032\056\033\062\034" +
    "\050\035\035\036\055\037\057\040\066\041\043\042\042" +
    "\043\067\044\034\045\045\001\002\000\004\130\u0135\001" +
    "\002\000\004\130\uffd7\001\002\000\004\112\u0137\001\002" +
    "\000\004\015\u0138\001\002\000\004\123\u0139\001\002\000" +
    "\004\124\u013a\001\002\000\004\127\u013b\001\002\000\070" +
    "\004\040\005\063\006\037\007\033\010\060\011\070\012" +
    "\047\013\051\014\054\024\053\025\064\026\065\027\046" +
    "\030\061\031\044\032\056\033\062\034\050\035\035\036" +
    "\055\037\057\040\066\041\043\042\042\043\067\044\034" +
    "\045\045\001\002\000\004\130\u013d\001\002\000\004\130" +
    "\uffd6\001\002\000\004\110\u0148\001\002\000\004\107\u0140" +
    "\001\002\000\004\112\u0141\001\002\000\004\015\u0142\001" +
    "\002\000\004\123\u0143\001\002\000\004\124\u0144\001\002" +
    "\000\004\127\u0145\001\002\000\070\004\040\005\063\006" +
    "\037\007\033\010\060\011\070\012\047\013\051\014\054" +
    "\024\053\025\064\026\065\027\046\030\061\031\044\032" +
    "\056\033\062\034\050\035\035\036\055\037\057\040\066" +
    "\041\043\042\042\043\067\044\034\045\045\001\002\000" +
    "\004\130\u0147\001\002\000\004\130\uffd9\001\002\000\004" +
    "\112\u0149\001\002\000\004\015\u014a\001\002\000\004\123" +
    "\u014b\001\002\000\004\124\u014c\001\002\000\004\127\u014d" +
    "\001\002\000\070\004\040\005\063\006\037\007\033\010" +
    "\060\011\070\012\047\013\051\014\054\024\053\025\064" +
    "\026\065\027\046\030\061\031\044\032\056\033\062\034" +
    "\050\035\035\036\055\037\057\040\066\041\043\042\042" +
    "\043\067\044\034\045\045\001\002\000\004\130\u014f\001" +
    "\002\000\004\130\uffd8\001\002\000\004\002\uffde\001\002" +
    "\000\004\110\u0164\001\002\000\006\107\u0154\112\u0153\001" +
    "\002\000\004\015\u015c\001\002\000\004\112\u0155\001\002" +
    "\000\004\015\u0156\001\002\000\004\123\u0157\001\002\000" +
    "\004\124\u0158\001\002\000\004\127\u0159\001\002\000\070" +
    "\004\040\005\063\006\037\007\033\010\060\011\070\012" +
    "\047\013\051\014\054\024\053\025\064\026\065\027\046" +
    "\030\061\031\044\032\056\033\062\034\050\035\035\036" +
    "\055\037\057\040\066\041\043\042\042\043\067\044\034" +
    "\045\045\001\002\000\004\130\u015b\001\002\000\004\130" +
    "\uffdb\001\002\000\004\123\u015d\001\002\000\004\034\u015e" +
    "\001\002\000\004\015\u015f\001\002\000\004\124\u0160\001" +
    "\002\000\004\127\u0161\001\002\000\070\004\040\005\063" +
    "\006\037\007\033\010\060\011\070\012\047\013\051\014" +
    "\054\024\053\025\064\026\065\027\046\030\061\031\044" +
    "\032\056\033\062\034\050\035\035\036\055\037\057\040" +
    "\066\041\043\042\042\043\067\044\034\045\045\001\002" +
    "\000\004\130\u0163\001\002\000\004\130\uffdc\001\002\000" +
    "\004\112\u0165\001\002\000\004\015\u0166\001\002\000\004" +
    "\123\u0167\001\002\000\004\124\u0168\001\002\000\004\127" +
    "\u0169\001\002\000\070\004\040\005\063\006\037\007\033" +
    "\010\060\011\070\012\047\013\051\014\054\024\053\025" +
    "\064\026\065\027\046\030\061\031\044\032\056\033\062" +
    "\034\050\035\035\036\055\037\057\040\066\041\043\042" +
    "\042\043\067\044\034\045\045\001\002\000\004\130\u016b" +
    "\001\002\000\004\130\uffda\001\002\000\004\127\u016d\001" +
    "\002\000\014\104\015\105\017\106\020\107\021\110\022" +
    "\001\002\000\004\130\u0171\001\002\000\004\130\u0170\001" +
    "\002\000\004\002\uffe1\001\002\000\004\002\uffdd\001\002" +
    "\000\004\015\u0173\001\002\000\004\127\u0174\001\002\000" +
    "\014\104\015\105\017\106\020\107\021\110\022\001\002" +
    "\000\004\130\u0178\001\002\000\004\130\u0177\001\002\000" +
    "\004\002\uffe3\001\002\000\004\002\uffdf\001\002\000\004" +
    "\002\000\001\002\000\004\015\u017b\001\002\000\004\127" +
    "\u017c\001\002\000\014\104\015\105\017\106\020\107\021" +
    "\110\022\001\002\000\004\130\u0180\001\002\000\004\130" +
    "\u017f\001\002\000\004\002\uffe4\001\002\000\004\002\uffe0" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017e\000\006\002\004\006\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\022\010\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\040\014\035\015\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\u0129" +
    "\014\035\015\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\u0133\014\035\015\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\u013b\014\035\015\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\u0145" +
    "\014\035\015\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\u014d\014" +
    "\035\015\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\u0159\014\035\015\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\u0161" +
    "\014\035\015\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\u0169\014" +
    "\035\015\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\u016e\010\u016d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\u0175\010\u0174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\u017d\010\u017c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol simbolo;
    
    public void syntax_error(Symbol simbolo) {
        this.simbolo = simbolo;
    }

    public Symbol getSimbolo() {
        return this.simbolo;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // tipoDeDato ::= BYTE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDeDato",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tipoDeDato ::= SHORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDeDato",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipoDeDato ::= INT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDeDato",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipoDeDato ::= LONG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDeDato",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipoDeDato ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDeDato",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipoDeDato ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDeDato",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipoDeDato ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDeDato",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipoDeDato ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDeDato",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipoDeDato ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDeDato",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // arregloDeDato ::= ARREGLO_BYTE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arregloDeDato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arregloDeDato ::= ARREGLO_SHORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arregloDeDato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arregloDeDato ::= ARREGLO_INT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arregloDeDato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arregloDeDato ::= ARREGLO_LONG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arregloDeDato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arregloDeDato ::= ARREGLO_FLOAT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arregloDeDato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arregloDeDato ::= ARREGLO_DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arregloDeDato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arregloDeDato ::= ARREGLO_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arregloDeDato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arregloDeDato ::= ARREGLO_CARACTER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arregloDeDato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arregloDeDato ::= ARREGLO_STRING 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arregloDeDato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // matrizDeDato ::= MATRIZ_BYTE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("matrizDeDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // matrizDeDato ::= MATRIZ_SHORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("matrizDeDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // matrizDeDato ::= MATRIZ_INT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("matrizDeDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // matrizDeDato ::= MATRIZ_LONG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("matrizDeDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // matrizDeDato ::= MATRIZ_FLOAT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("matrizDeDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // matrizDeDato ::= MATRIZ_DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("matrizDeDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // matrizDeDato ::= MATRIZ_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("matrizDeDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // matrizDeDato ::= MATRIZ_CARACTER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("matrizDeDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // matrizDeDato ::= MATRIZ_STRING 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("matrizDeDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // clase ::= RESERVADA_PUBLIC RESERVADA_CLASS IDENTIFICADOR LLAVE_ABIERTA metodoMain LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // clase ::= RESERVADA_PRIVATE RESERVADA_CLASS IDENTIFICADOR LLAVE_ABIERTA metodoMain LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // clase ::= RESERVADA_PROTECTED RESERVADA_CLASS IDENTIFICADOR LLAVE_ABIERTA metodoMain LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // clase ::= RESERVADA_CLASS IDENTIFICADOR LLAVE_ABIERTA metodoMain LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // clase ::= RESERVADA_PUBLIC RESERVADA_CLASS IDENTIFICADOR LLAVE_ABIERTA crearMetodo LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // clase ::= RESERVADA_PRIVATE RESERVADA_CLASS IDENTIFICADOR LLAVE_ABIERTA crearMetodo LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // clase ::= RESERVADA_PROTECTED RESERVADA_CLASS IDENTIFICADOR LLAVE_ABIERTA crearMetodo LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // clase ::= RESERVADA_CLASS IDENTIFICADOR LLAVE_ABIERTA crearMetodo LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // metodoMain ::= RESERVADA_PUBLIC RESERVADA_STATIC RESERVADA_VOID IDENTIFICADOR PARENTESIS_ABIERTO ARREGLO_STRING IDENTIFICADOR PARENTESIS_CERRADO LLAVE_ABIERTA codigo LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodoMain",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // crearMetodo ::= RESERVADA_PUBLIC RESERVADA_STATIC RESERVADA_FINAL RESERVADA_VOID IDENTIFICADOR PARENTESIS_ABIERTO PARENTESIS_CERRADO LLAVE_ABIERTA codigo LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("crearMetodo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // crearMetodo ::= RESERVADA_PUBLIC RESERVADA_FINAL RESERVADA_STATIC RESERVADA_VOID IDENTIFICADOR PARENTESIS_ABIERTO PARENTESIS_CERRADO LLAVE_ABIERTA codigo LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("crearMetodo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // crearMetodo ::= RESERVADA_PRIVATE RESERVADA_STATIC RESERVADA_FINAL RESERVADA_VOID IDENTIFICADOR PARENTESIS_ABIERTO PARENTESIS_CERRADO LLAVE_ABIERTA codigo LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("crearMetodo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // crearMetodo ::= RESERVADA_PRIVATE RESERVADA_FINAL RESERVADA_STATIC RESERVADA_VOID IDENTIFICADOR PARENTESIS_ABIERTO PARENTESIS_CERRADO LLAVE_ABIERTA codigo LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("crearMetodo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // crearMetodo ::= RESERVADA_PROTECTED RESERVADA_STATIC RESERVADA_FINAL RESERVADA_VOID IDENTIFICADOR PARENTESIS_ABIERTO PARENTESIS_CERRADO LLAVE_ABIERTA codigo LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("crearMetodo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // crearMetodo ::= RESERVADA_PROTECTED RESERVADA_FINAL RESERVADA_STATIC RESERVADA_VOID IDENTIFICADOR PARENTESIS_ABIERTO PARENTESIS_CERRADO LLAVE_ABIERTA codigo LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("crearMetodo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // crearMetodo ::= RESERVADA_STATIC RESERVADA_FINAL RESERVADA_VOID IDENTIFICADOR PARENTESIS_ABIERTO PARENTESIS_CERRADO LLAVE_ABIERTA codigo LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("crearMetodo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // crearMetodo ::= RESERVADA_FINAL RESERVADA_STATIC RESERVADA_VOID IDENTIFICADOR PARENTESIS_ABIERTO PARENTESIS_CERRADO LLAVE_ABIERTA codigo LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("crearMetodo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // llamarMetodo ::= IDENTIFICADOR PARENTESIS_ABIERTO PARENTESIS_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamarMetodo",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // llamarMetodo ::= IDENTIFICADOR PARENTESIS_ABIERTO IDENTIFICADOR PARENTESIS_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamarMetodo",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // llamarMetodo ::= IDENTIFICADOR PARENTESIS_ABIERTO NUMERO PARENTESIS_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamarMetodo",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // llamarMetodo ::= IDENTIFICADOR PARENTESIS_ABIERTO NUMERO_FLOTANTE PARENTESIS_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamarMetodo",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // llamarMetodo ::= IDENTIFICADOR PARENTESIS_ABIERTO NUMERO_DOUBLE PARENTESIS_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamarMetodo",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // llamarMetodo ::= IDENTIFICADOR PARENTESIS_ABIERTO VALOR_BOOLEANO PARENTESIS_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamarMetodo",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // llamarMetodo ::= IDENTIFICADOR PARENTESIS_ABIERTO VALOR_CARACTER PARENTESIS_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamarMetodo",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // llamarMetodo ::= IDENTIFICADOR PARENTESIS_ABIERTO CADENA PARENTESIS_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamarMetodo",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametro ::= tipoDeDato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametro ::= tipoDeDato IDENTIFICADOR SIGNO_COMA parametro 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametro ::= arregloDeDato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametro ::= arregloDeDato IDENTIFICADOR SIGNO_COMA parametro 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parametro ::= matrizDeDato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametro ::= matrizDeDato IDENTIFICADOR SIGNO_COMA parametro 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // codigo ::= declaracionInicializada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // codigo ::= declaracion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaracionInicializada ::= BYTE IDENTIFICADOR OPERADOR_DE_ASIGNACION NUMERO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaracionInicializada ::= SHORT IDENTIFICADOR OPERADOR_DE_ASIGNACION NUMERO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaracionInicializada ::= INT IDENTIFICADOR OPERADOR_DE_ASIGNACION NUMERO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaracionInicializada ::= LONG IDENTIFICADOR OPERADOR_DE_ASIGNACION NUMERO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaracionInicializada ::= FLOAT IDENTIFICADOR OPERADOR_DE_ASIGNACION NUMERO_FLOTANTE SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaracionInicializada ::= DOUBLE IDENTIFICADOR OPERADOR_DE_ASIGNACION NUMERO_DOUBLE SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaracionInicializada ::= BOOLEANO IDENTIFICADOR OPERADOR_DE_ASIGNACION VALOR_BOOLEANO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaracionInicializada ::= CARACTER IDENTIFICADOR OPERADOR_DE_ASIGNACION VALOR_CARACTER SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaracionInicializada ::= STRING IDENTIFICADOR OPERADOR_DE_ASIGNACION CADENA SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracionInicializada ::= ARREGLO_BYTE IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW BYTE CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaracionInicializada ::= ARREGLO_SHORT IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW SHORT CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaracionInicializada ::= ARREGLO_INT IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW INT CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaracionInicializada ::= ARREGLO_LONG IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW LONG CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaracionInicializada ::= ARREGLO_FLOAT IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW FLOAT CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaracionInicializada ::= ARREGLO_DOUBLE IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW DOUBLE CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaracionInicializada ::= ARREGLO_BOOLEANO IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW BOOLEANO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // declaracionInicializada ::= ARREGLO_CARACTER IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW CARACTER CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declaracionInicializada ::= ARREGLO_STRING IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW STRING CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declaracionInicializada ::= MATRIZ_BYTE IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW BYTE CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declaracionInicializada ::= MATRIZ_SHORT IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW SHORT CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declaracionInicializada ::= MATRIZ_INT IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW INT CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declaracionInicializada ::= MATRIZ_LONG IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW LONG CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declaracionInicializada ::= MATRIZ_FLOAT IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW FLOAT CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaracionInicializada ::= MATRIZ_DOUBLE IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW DOUBLE CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declaracionInicializada ::= MATRIZ_BOOLEANO IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW BOOLEANO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // declaracionInicializada ::= MATRIZ_CARACTER IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW CARACTER CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // declaracionInicializada ::= MATRIZ_STRING IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW STRING CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // declaracion ::= BYTE IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // declaracion ::= SHORT IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // declaracion ::= INT IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // declaracion ::= LONG IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // declaracion ::= FLOAT IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // declaracion ::= DOUBLE IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // declaracion ::= BOOLEANO IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // declaracion ::= CARACTER IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // declaracion ::= STRING IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // declaracion ::= ARREGLO_BYTE IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // declaracion ::= ARREGLO_SHORT IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // declaracion ::= ARREGLO_INT IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // declaracion ::= ARREGLO_LONG IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // declaracion ::= ARREGLO_FLOAT IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // declaracion ::= ARREGLO_DOUBLE IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // declaracion ::= ARREGLO_BOOLEANO IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // declaracion ::= ARREGLO_CARACTER IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // declaracion ::= ARREGLO_STRING IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // declaracion ::= MATRIZ_BYTE IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // declaracion ::= MATRIZ_SHORT IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // declaracion ::= MATRIZ_INT IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // declaracion ::= MATRIZ_LONG IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // declaracion ::= MATRIZ_FLOAT IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // declaracion ::= MATRIZ_DOUBLE IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // declaracion ::= MATRIZ_BOOLEANO IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // declaracion ::= MATRIZ_CARACTER IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // declaracion ::= MATRIZ_STRING IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
