
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\003\000\002\002\004\000\002\003" +
    "\010\000\002\003\010\000\002\003\010\000\002\003\007" +
    "\000\002\004\015\000\002\005\003\000\002\005\003\000" +
    "\002\006\007\000\002\006\007\000\002\006\007\000\002" +
    "\006\007\000\002\006\007\000\002\006\007\000\002\006" +
    "\007\000\002\006\007\000\002\006\007\000\002\006\013" +
    "\000\002\006\013\000\002\006\013\000\002\006\013\000" +
    "\002\006\013\000\002\006\013\000\002\006\013\000\002" +
    "\006\013\000\002\006\013\000\002\006\016\000\002\006" +
    "\016\000\002\006\016\000\002\006\016\000\002\006\016" +
    "\000\002\006\016\000\002\006\016\000\002\006\016\000" +
    "\002\006\016\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\012\104\004\105\006\106\007\111\010\001" +
    "\002\000\004\111\u012b\001\002\000\004\002\u012a\001\002" +
    "\000\004\111\u0125\001\002\000\004\111\u0120\001\002\000" +
    "\004\015\012\001\002\000\004\002\001\001\002\000\004" +
    "\127\013\001\002\000\004\104\014\001\002\000\004\110" +
    "\017\001\002\000\004\130\016\001\002\000\004\002\ufffc" +
    "\001\002\000\004\112\020\001\002\000\004\015\021\001" +
    "\002\000\004\123\022\001\002\000\004\034\023\001\002" +
    "\000\004\015\024\001\002\000\004\124\025\001\002\000" +
    "\004\127\026\001\002\000\070\004\034\005\057\006\033" +
    "\007\027\010\054\011\064\012\043\013\046\014\050\024" +
    "\047\025\060\026\062\027\041\030\055\031\042\032\051" +
    "\033\056\034\044\035\031\036\052\037\053\040\061\041" +
    "\036\042\037\043\063\044\030\045\040\001\002\000\004" +
    "\015\u011b\001\002\000\004\015\u010f\001\002\000\004\015" +
    "\u0103\001\002\000\004\130\ufffa\001\002\000\004\015\376" +
    "\001\002\000\004\015\371\001\002\000\004\130\370\001" +
    "\002\000\004\015\354\001\002\000\004\015\340\001\002" +
    "\000\004\015\324\001\002\000\004\015\313\001\002\000" +
    "\004\015\302\001\002\000\004\015\275\001\002\000\004" +
    "\015\264\001\002\000\004\130\ufff9\001\002\000\004\015" +
    "\257\001\002\000\004\015\246\001\002\000\004\015\241" +
    "\001\002\000\004\015\230\001\002\000\004\015\214\001" +
    "\002\000\004\015\200\001\002\000\004\015\173\001\002" +
    "\000\004\015\162\001\002\000\004\015\151\001\002\000" +
    "\004\015\144\001\002\000\004\015\133\001\002\000\004" +
    "\015\117\001\002\000\004\015\106\001\002\000\004\015" +
    "\072\001\002\000\004\015\065\001\002\000\006\055\067" +
    "\121\066\001\002\000\004\130\uffd8\001\002\000\004\020" +
    "\070\001\002\000\004\121\071\001\002\000\004\130\ufff3" +
    "\001\002\000\006\055\074\121\073\001\002\000\004\130" +
    "\uffc5\001\002\000\004\116\075\001\002\000\004\012\076" +
    "\001\002\000\004\125\077\001\002\000\004\016\100\001" +
    "\002\000\004\126\101\001\002\000\004\125\102\001\002" +
    "\000\004\016\103\001\002\000\004\126\104\001\002\000" +
    "\004\121\105\001\002\000\004\130\uffe0\001\002\000\006" +
    "\055\110\121\107\001\002\000\004\130\uffd2\001\002\000" +
    "\004\116\111\001\002\000\004\006\112\001\002\000\004" +
    "\125\113\001\002\000\004\016\114\001\002\000\004\126" +
    "\115\001\002\000\004\121\116\001\002\000\004\130\uffed" +
    "\001\002\000\006\055\121\121\120\001\002\000\004\130" +
    "\uffc8\001\002\000\004\116\122\001\002\000\004\007\123" +
    "\001\002\000\004\125\124\001\002\000\004\016\125\001" +
    "\002\000\004\126\126\001\002\000\004\125\127\001\002" +
    "\000\004\016\130\001\002\000\004\126\131\001\002\000" +
    "\004\121\132\001\002\000\004\130\uffe3\001\002\000\006" +
    "\055\135\121\134\001\002\000\004\130\uffd3\001\002\000" +
    "\004\116\136\001\002\000\004\005\137\001\002\000\004" +
    "\125\140\001\002\000\004\016\141\001\002\000\004\126" +
    "\142\001\002\000\004\121\143\001\002\000\004\130\uffee" +
    "\001\002\000\006\055\146\121\145\001\002\000\004\130" +
    "\uffdc\001\002\000\004\016\147\001\002\000\004\121\150" +
    "\001\002\000\004\130\ufff7\001\002\000\006\055\153\121" +
    "\152\001\002\000\004\130\uffcd\001\002\000\004\116\154" +
    "\001\002\000\004\013\155\001\002\000\004\125\156\001" +
    "\002\000\004\016\157\001\002\000\004\126\160\001\002" +
    "\000\004\121\161\001\002\000\004\130\uffe8\001\002\000" +
    "\006\055\164\121\163\001\002\000\004\130\uffd0\001\002" +
    "\000\004\116\165\001\002\000\004\010\166\001\002\000" +
    "\004\125\167\001\002\000\004\016\170\001\002\000\004" +
    "\126\171\001\002\000\004\121\172\001\002\000\004\130" +
    "\uffeb\001\002\000\006\055\175\121\174\001\002\000\004" +
    "\130\uffd9\001\002\000\004\017\176\001\002\000\004\121" +
    "\177\001\002\000\004\130\ufff4\001\002\000\006\055\202" +
    "\121\201\001\002\000\004\130\uffc9\001\002\000\004\116" +
    "\203\001\002\000\004\006\204\001\002\000\004\125\205" +
    "\001\002\000\004\016\206\001\002\000\004\126\207\001" +
    "\002\000\004\125\210\001\002\000\004\016\211\001\002" +
    "\000\004\126\212\001\002\000\004\121\213\001\002\000" +
    "\004\130\uffe4\001\002\000\006\055\216\121\215\001\002" +
    "\000\004\130\uffca\001\002\000\004\116\217\001\002\000" +
    "\004\005\220\001\002\000\004\125\221\001\002\000\004" +
    "\016\222\001\002\000\004\126\223\001\002\000\004\125" +
    "\224\001\002\000\004\016\225\001\002\000\004\126\226" +
    "\001\002\000\004\121\227\001\002\000\004\130\uffe5\001" +
    "\002\000\006\055\232\121\231\001\002\000\004\130\uffce" +
    "\001\002\000\004\116\233\001\002\000\004\012\234\001" +
    "\002\000\004\125\235\001\002\000\004\016\236\001\002" +
    "\000\004\126\237\001\002\000\004\121\240\001\002\000" +
    "\004\130\uffe9\001\002\000\006\055\243\121\242\001\002" +
    "\000\004\130\uffd5\001\002\000\004\023\244\001\002\000" +
    "\004\121\245\001\002\000\004\130\ufff0\001\002\000\006" +
    "\055\250\121\247\001\002\000\004\130\uffd4\001\002\000" +
    "\004\116\251\001\002\000\004\004\252\001\002\000\004" +
    "\125\253\001\002\000\004\016\254\001\002\000\004\126" +
    "\255\001\002\000\004\121\256\001\002\000\004\130\uffef" +
    "\001\002\000\006\055\261\121\260\001\002\000\004\130" +
    "\uffd6\001\002\000\004\022\262\001\002\000\004\121\263" +
    "\001\002\000\004\130\ufff1\001\002\000\006\055\266\121" +
    "\265\001\002\000\004\130\uffcc\001\002\000\004\116\267" +
    "\001\002\000\004\014\270\001\002\000\004\125\271\001" +
    "\002\000\004\016\272\001\002\000\004\126\273\001\002" +
    "\000\004\121\274\001\002\000\004\130\uffe7\001\002\000" +
    "\006\055\277\121\276\001\002\000\004\130\uffd7\001\002" +
    "\000\004\021\300\001\002\000\004\121\301\001\002\000" +
    "\004\130\ufff2\001\002\000\006\055\304\121\303\001\002" +
    "\000\004\130\uffcf\001\002\000\004\116\305\001\002\000" +
    "\004\011\306\001\002\000\004\125\307\001\002\000\004" +
    "\016\310\001\002\000\004\126\311\001\002\000\004\121" +
    "\312\001\002\000\004\130\uffea\001\002\000\006\055\315" +
    "\121\314\001\002\000\004\130\uffd1\001\002\000\004\116" +
    "\316\001\002\000\004\007\317\001\002\000\004\125\320" +
    "\001\002\000\004\016\321\001\002\000\004\126\322\001" +
    "\002\000\004\121\323\001\002\000\004\130\uffec\001\002" +
    "\000\006\055\326\121\325\001\002\000\004\130\uffc3\001" +
    "\002\000\004\116\327\001\002\000\004\014\330\001\002" +
    "\000\004\125\331\001\002\000\004\016\332\001\002\000" +
    "\004\126\333\001\002\000\004\125\334\001\002\000\004" +
    "\016\335\001\002\000\004\126\336\001\002\000\004\121" +
    "\337\001\002\000\004\130\uffde\001\002\000\006\055\342" +
    "\121\341\001\002\000\004\130\uffc6\001\002\000\004\116" +
    "\343\001\002\000\004\011\344\001\002\000\004\125\345" +
    "\001\002\000\004\016\346\001\002\000\004\126\347\001" +
    "\002\000\004\125\350\001\002\000\004\016\351\001\002" +
    "\000\004\126\352\001\002\000\004\121\353\001\002\000" +
    "\004\130\uffe1\001\002\000\006\055\356\121\355\001\002" +
    "\000\004\130\uffc7\001\002\000\004\116\357\001\002\000" +
    "\004\010\360\001\002\000\004\125\361\001\002\000\004" +
    "\016\362\001\002\000\004\126\363\001\002\000\004\125" +
    "\364\001\002\000\004\016\365\001\002\000\004\126\366" +
    "\001\002\000\004\121\367\001\002\000\004\130\uffe2\001" +
    "\002\000\004\130\ufffb\001\002\000\006\055\373\121\372" +
    "\001\002\000\004\130\uffdd\001\002\000\004\016\374\001" +
    "\002\000\004\121\375\001\002\000\004\130\ufff8\001\002" +
    "\000\006\055\u0100\121\377\001\002\000\004\130\uffdb\001" +
    "\002\000\004\016\u0101\001\002\000\004\121\u0102\001\002" +
    "\000\004\130\ufff6\001\002\000\006\055\u0105\121\u0104\001" +
    "\002\000\004\130\uffcb\001\002\000\004\116\u0106\001\002" +
    "\000\004\004\u0107\001\002\000\004\125\u0108\001\002\000" +
    "\004\016\u0109\001\002\000\004\126\u010a\001\002\000\004" +
    "\125\u010b\001\002\000\004\016\u010c\001\002\000\004\126" +
    "\u010d\001\002\000\004\121\u010e\001\002\000\004\130\uffe6" +
    "\001\002\000\006\055\u0111\121\u0110\001\002\000\004\130" +
    "\uffc4\001\002\000\004\116\u0112\001\002\000\004\013\u0113" +
    "\001\002\000\004\125\u0114\001\002\000\004\016\u0115\001" +
    "\002\000\004\126\u0116\001\002\000\004\125\u0117\001\002" +
    "\000\004\016\u0118\001\002\000\004\126\u0119\001\002\000" +
    "\004\121\u011a\001\002\000\004\130\uffdf\001\002\000\006" +
    "\055\u011d\121\u011c\001\002\000\004\130\uffda\001\002\000" +
    "\004\016\u011e\001\002\000\004\121\u011f\001\002\000\004" +
    "\130\ufff5\001\002\000\004\015\u0121\001\002\000\004\127" +
    "\u0122\001\002\000\004\104\014\001\002\000\004\130\u0124" +
    "\001\002\000\004\002\ufffd\001\002\000\004\015\u0126\001" +
    "\002\000\004\127\u0127\001\002\000\004\104\014\001\002" +
    "\000\004\130\u0129\001\002\000\004\002\ufffe\001\002\000" +
    "\004\002\000\001\002\000\004\015\u012c\001\002\000\004" +
    "\127\u012d\001\002\000\004\104\014\001\002\000\004\130" +
    "\u012f\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\006\002\004\003\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\034\006\031\007" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\u0122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\u0127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\u012d\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol simbolo;
    
    public void syntax_error(Symbol simbolo) {
        this.simbolo = simbolo;
    }

    public Symbol getSimbolo() {
        return this.simbolo;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // clase ::= RESERVADA_PUBLIC RESERVADA_CLASS IDENTIFICADOR LLAVE_ABIERTA metodoMain LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clase",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // clase ::= RESERVADA_PRIVATE RESERVADA_CLASS IDENTIFICADOR LLAVE_ABIERTA metodoMain LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clase",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // clase ::= RESERVADA_PROTECTED RESERVADA_CLASS IDENTIFICADOR LLAVE_ABIERTA metodoMain LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clase",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // clase ::= RESERVADA_CLASS IDENTIFICADOR LLAVE_ABIERTA metodoMain LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clase",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // metodoMain ::= RESERVADA_PUBLIC RESERVADA_STATIC RESERVADA_VOID IDENTIFICADOR PARENTESIS_ABIERTO ARREGLO_STRING IDENTIFICADOR PARENTESIS_CERRADO LLAVE_ABIERTA codigo LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodoMain",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= declaracionInicializada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= declaracion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracionInicializada ::= BYTE IDENTIFICADOR OPERADOR_DE_ASIGNACION NUMERO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionInicializada ::= SHORT IDENTIFICADOR OPERADOR_DE_ASIGNACION NUMERO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracionInicializada ::= INT IDENTIFICADOR OPERADOR_DE_ASIGNACION NUMERO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracionInicializada ::= LONG IDENTIFICADOR OPERADOR_DE_ASIGNACION NUMERO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionInicializada ::= FLOAT IDENTIFICADOR OPERADOR_DE_ASIGNACION NUMERO_FLOTANTE SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracionInicializada ::= DOUBLE IDENTIFICADOR OPERADOR_DE_ASIGNACION NUMERO_DOUBLE SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracionInicializada ::= BOOLEANO IDENTIFICADOR OPERADOR_DE_ASIGNACION VALOR_BOOLEANO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracionInicializada ::= CARACTER IDENTIFICADOR OPERADOR_DE_ASIGNACION VALOR_CARACTER SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracionInicializada ::= STRING IDENTIFICADOR OPERADOR_DE_ASIGNACION CADENA SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracionInicializada ::= ARREGLO_BYTE IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW BYTE CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracionInicializada ::= ARREGLO_SHORT IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW SHORT CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracionInicializada ::= ARREGLO_INT IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW INT CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracionInicializada ::= ARREGLO_LONG IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW LONG CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracionInicializada ::= ARREGLO_FLOAT IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW FLOAT CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracionInicializada ::= ARREGLO_DOUBLE IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW DOUBLE CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracionInicializada ::= ARREGLO_BOOLEANO IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW BOOLEANO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracionInicializada ::= ARREGLO_CARACTER IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW CARACTER CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracionInicializada ::= ARREGLO_STRING IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW STRING CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracionInicializada ::= MATRIZ_BYTE IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW BYTE CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracionInicializada ::= MATRIZ_SHORT IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW SHORT CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracionInicializada ::= MATRIZ_INT IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW INT CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracionInicializada ::= MATRIZ_LONG IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW LONG CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracionInicializada ::= MATRIZ_FLOAT IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW FLOAT CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracionInicializada ::= MATRIZ_DOUBLE IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW DOUBLE CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracionInicializada ::= MATRIZ_BOOLEANO IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW BOOLEANO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracionInicializada ::= MATRIZ_CARACTER IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW CARACTER CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracionInicializada ::= MATRIZ_STRING IDENTIFICADOR OPERADOR_DE_ASIGNACION RESERVADA_NEW STRING CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO CORCHETE_ABIERTO NUMERO CORCHETE_CERRADO SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionInicializada",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion ::= BYTE IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion ::= SHORT IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion ::= INT IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracion ::= LONG IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracion ::= FLOAT IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracion ::= DOUBLE IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracion ::= BOOLEANO IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion ::= CARACTER IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion ::= STRING IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracion ::= ARREGLO_BYTE IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion ::= ARREGLO_SHORT IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracion ::= ARREGLO_INT IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracion ::= ARREGLO_LONG IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracion ::= ARREGLO_FLOAT IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracion ::= ARREGLO_DOUBLE IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaracion ::= ARREGLO_BOOLEANO IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaracion ::= ARREGLO_CARACTER IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaracion ::= ARREGLO_STRING IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracion ::= MATRIZ_BYTE IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracion ::= MATRIZ_SHORT IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracion ::= MATRIZ_INT IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracion ::= MATRIZ_LONG IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracion ::= MATRIZ_FLOAT IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracion ::= MATRIZ_DOUBLE IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracion ::= MATRIZ_BOOLEANO IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracion ::= MATRIZ_CARACTER IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaracion ::= MATRIZ_STRING IDENTIFICADOR SIGNO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
