/* The following code was generated by JFlex 1.4.3 on 15/12/24 14:24 */

package otros;

import modelos.Token;
import static modelos.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 15/12/24 14:24 from the specification file
 * <tt>C:/Users/FeralcoJam/Documents/NetBeansProjects/FeralCompiler/src/otros/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\10\2\0\1\6\22\0\1\61\1\37\1\3\2\0"+
    "\1\35\1\42\1\0\1\44\1\45\1\34\1\32\1\6\1\33\1\53"+
    "\1\7\12\2\1\54\1\52\1\41\1\36\1\40\2\0\14\1\1\55"+
    "\5\1\1\31\7\1\1\46\1\4\1\47\1\0\1\1\1\0\1\25"+
    "\1\11\1\30\1\26\1\14\1\5\1\24\1\16\1\21\1\1\1\63"+
    "\1\23\1\56\1\22\1\17\1\64\1\60\1\20\1\15\1\13\1\27"+
    "\1\65\1\62\1\57\1\12\1\66\1\50\1\43\1\51\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\2\1\4\1\5"+
    "\1\6\14\2\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\2\1\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\4\2\1\0\1\30\1\0"+
    "\3\2\1\4\16\2\1\31\7\2\1\32\4\2\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\0\6\2\1\0\1\45\6\2\1\46\12\2"+
    "\1\47\1\2\1\50\12\2\1\0\12\2\1\51\2\2"+
    "\1\52\1\2\1\53\1\54\11\2\1\0\1\2\1\55"+
    "\1\56\3\2\1\57\2\2\1\60\1\2\1\3\6\2"+
    "\1\61\1\2\1\62\1\63\1\2\1\0\1\2\1\64"+
    "\1\2\1\0\3\2\1\65\1\66\3\2\1\67\2\2"+
    "\1\0\4\2\1\0\1\70\1\71\1\2\1\0\1\2"+
    "\1\72\7\2\1\0\1\73\2\2\1\0\2\2\1\74"+
    "\1\2\1\0\1\75\1\76\1\2\1\0\1\77\1\100"+
    "\2\2\1\101\1\102\1\103\4\0\7\2\1\104\1\2"+
    "\1\105\1\106\1\0\1\107\1\2\1\110\1\111\1\2"+
    "\1\112\1\2\1\113\1\0\1\2\1\114\1\2\2\0"+
    "\1\2\6\0\6\2\1\115\1\116\1\2\1\0\1\117"+
    "\1\2\1\0\2\2\1\0\1\2\1\120\1\121\1\122"+
    "\1\123\1\124\2\0\1\125\1\126\1\127\2\2\1\125"+
    "\1\126\1\127\1\2\1\130\1\131\1\132\1\133\1\2"+
    "\1\134\1\135\2\0\1\136\1\0\1\136\1\2\1\137"+
    "\1\0\1\2\1\140\1\141\1\0\1\2\1\142\1\143"+
    "\2\144";

  private static int [] zzUnpackAction() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\67\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\67"+
    "\0\67\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604"+
    "\0\67\0\67\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\u063b\0\u0672\0\u06a9\0\u06e0\0\334\0\67\0\u0717\0\u074e"+
    "\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906"+
    "\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe"+
    "\0\u0af5\0\156\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f"+
    "\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\67\0\67"+
    "\0\67\0\67\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41"+
    "\0\156\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\156"+
    "\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243"+
    "\0\u127a\0\u12b1\0\u12e8\0\u131f\0\156\0\u1356\0\u138d\0\u13c4"+
    "\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c"+
    "\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734"+
    "\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847\0\156\0\u187e\0\156"+
    "\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36"+
    "\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\156\0\u1b49\0\u1b80\0\u1bb7"+
    "\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\156\0\u1cca\0\67\0\u1d01"+
    "\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\156\0\u1e4b\0\u1e82"+
    "\0\u1eb9\0\u17d9\0\u1ef0\0\u1f27\0\156\0\u1f5e\0\u1f95\0\u1fcc"+
    "\0\u2003\0\u203a\0\u2071\0\156\0\u20a8\0\u20df\0\u2116\0\u214d"+
    "\0\u2184\0\u1b49\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u1c25\0\u2297"+
    "\0\156\0\156\0\u22ce\0\u2305\0\u233c\0\156\0\u2373\0\u23aa"+
    "\0\u23e1\0\u2418\0\u244f\0\u2486\0\u1eb9\0\u24bd\0\u24f4\0\u252b"+
    "\0\u2562\0\u2599\0\u25d0\0\u2607\0\156\0\u2071\0\u263e\0\156"+
    "\0\156\0\u2675\0\u26ac\0\156\0\u26e3\0\u271a\0\u2751\0\u2788"+
    "\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940"+
    "\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\156\0\u2a8a\0\156"+
    "\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66\0\67\0\156\0\u2b9d\0\u2bd4"+
    "\0\u2c0b\0\67\0\u2c42\0\u2c79\0\156\0\u2788\0\u2cb0\0\u2ce7"+
    "\0\u27f6\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68"+
    "\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\156\0\156\0\u2fb2"+
    "\0\u2fe9\0\67\0\u2b2f\0\u3020\0\u3057\0\u308e\0\u30c5\0\u30fc"+
    "\0\67\0\156\0\u3133\0\67\0\u316a\0\u31a1\0\u31d8\0\67"+
    "\0\67\0\67\0\u320f\0\u3246\0\156\0\156\0\156\0\u327d"+
    "\0\156\0\67\0\u32b4\0\156\0\u32eb\0\67\0\156\0\u3322"+
    "\0\u3359\0\67\0\u3390\0\156\0\u33c7\0\156\0\u33fe\0\u3435"+
    "\0\67\0\67\0\u346c\0\u34a3\0\67\0\156\0\67\0\156";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\3\1\13\1\14\1\15\2\3\1\16"+
    "\1\17\1\20\1\21\1\3\1\22\1\23\1\3\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\3\3\1\7\1\52"+
    "\1\3\1\53\1\54\1\3\70\0\2\3\2\0\1\3"+
    "\3\0\21\3\23\0\4\3\1\0\5\3\2\0\1\4"+
    "\64\0\3\55\1\56\1\57\62\55\1\0\2\3\2\0"+
    "\1\3\3\0\6\3\1\60\1\3\1\61\1\3\1\62"+
    "\6\3\23\0\4\3\1\0\5\3\6\0\1\7\52\0"+
    "\1\7\14\0\1\63\60\0\2\3\2\0\1\3\3\0"+
    "\1\3\1\64\4\3\1\65\1\66\11\3\23\0\4\3"+
    "\1\0\5\3\1\0\2\3\2\0\1\3\3\0\5\3"+
    "\1\67\1\3\1\70\11\3\23\0\4\3\1\0\5\3"+
    "\1\0\2\3\2\0\1\3\3\0\11\3\1\71\1\72"+
    "\6\3\23\0\2\3\1\73\1\3\1\0\5\3\1\0"+
    "\2\3\2\0\1\3\3\0\1\3\1\74\1\75\2\3"+
    "\1\76\10\3\1\77\2\3\23\0\4\3\1\0\1\100"+
    "\4\3\1\0\2\3\2\0\1\3\3\0\3\3\1\101"+
    "\15\3\23\0\4\3\1\0\5\3\1\0\2\3\2\0"+
    "\1\102\3\0\11\3\1\103\7\3\23\0\1\3\1\104"+
    "\2\3\1\0\5\3\1\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\105\12\3\1\106\2\3\23\0\4\3\1\0"+
    "\5\3\1\0\2\3\2\0\1\3\3\0\6\3\1\107"+
    "\12\3\23\0\4\3\1\0\5\3\1\0\2\3\2\0"+
    "\1\3\3\0\1\110\20\3\23\0\4\3\1\0\5\3"+
    "\1\0\2\3\2\0\1\3\3\0\3\3\1\111\2\3"+
    "\1\112\12\3\23\0\4\3\1\0\5\3\1\0\2\3"+
    "\2\0\1\3\3\0\5\3\1\113\4\3\1\114\1\3"+
    "\1\115\4\3\23\0\4\3\1\0\5\3\1\0\2\3"+
    "\2\0\1\3\3\0\2\3\1\116\16\3\23\0\4\3"+
    "\1\0\5\3\32\0\1\117\3\0\1\120\63\0\1\121"+
    "\2\0\1\122\66\0\1\123\66\0\1\124\66\0\1\125"+
    "\66\0\1\126\72\0\1\127\67\0\1\130\56\0\1\131"+
    "\34\0\2\3\2\0\1\3\3\0\14\3\1\132\4\3"+
    "\23\0\4\3\1\0\5\3\1\0\2\3\2\0\1\3"+
    "\3\0\5\3\1\133\13\3\23\0\4\3\1\0\5\3"+
    "\1\0\2\3\2\0\1\3\3\0\7\3\1\134\4\3"+
    "\1\135\1\3\1\136\2\3\23\0\4\3\1\0\5\3"+
    "\1\0\2\3\2\0\1\3\3\0\6\3\1\137\12\3"+
    "\23\0\4\3\1\0\5\3\4\0\1\140\63\0\2\3"+
    "\2\0\1\3\3\0\7\3\1\141\11\3\23\0\4\3"+
    "\1\0\5\3\1\0\2\3\2\0\1\3\3\0\11\3"+
    "\1\142\7\3\23\0\4\3\1\0\5\3\1\0\2\3"+
    "\2\0\1\3\3\0\6\3\1\143\12\3\23\0\4\3"+
    "\1\0\5\3\10\63\1\0\56\63\1\0\2\3\2\0"+
    "\1\3\3\0\2\3\1\144\16\3\23\0\4\3\1\0"+
    "\5\3\1\0\2\3\2\0\1\3\3\0\6\3\1\145"+
    "\12\3\23\0\4\3\1\0\5\3\1\0\2\3\2\0"+
    "\1\3\3\0\3\3\1\146\15\3\23\0\4\3\1\0"+
    "\5\3\1\0\2\3\2\0\1\3\3\0\10\3\1\147"+
    "\10\3\23\0\4\3\1\0\5\3\1\0\2\3\2\0"+
    "\1\3\3\0\1\3\1\150\12\3\1\151\4\3\23\0"+
    "\4\3\1\0\5\3\1\0\2\3\2\0\1\3\3\0"+
    "\16\3\1\152\2\3\23\0\4\3\1\0\5\3\1\0"+
    "\2\3\2\0\1\3\3\0\4\3\1\153\14\3\23\0"+
    "\4\3\1\0\5\3\1\0\2\3\2\0\1\3\3\0"+
    "\2\3\1\154\16\3\23\0\4\3\1\0\5\3\1\0"+
    "\2\3\2\0\1\3\3\0\11\3\1\155\7\3\23\0"+
    "\4\3\1\0\5\3\1\0\2\3\2\0\1\3\3\0"+
    "\14\3\1\156\4\3\23\0\4\3\1\0\5\3\1\0"+
    "\2\3\2\0\1\3\3\0\6\3\1\157\12\3\23\0"+
    "\4\3\1\0\5\3\1\0\2\3\2\0\1\3\3\0"+
    "\21\3\23\0\4\3\1\0\2\3\1\160\2\3\1\0"+
    "\2\3\2\0\1\3\3\0\10\3\1\161\10\3\23\0"+
    "\4\3\1\0\5\3\1\0\2\3\2\0\1\3\3\0"+
    "\2\3\1\162\16\3\23\0\4\3\1\0\5\3\1\0"+
    "\2\3\2\0\1\3\3\0\2\3\1\163\16\3\23\0"+
    "\4\3\1\0\5\3\1\0\2\3\2\0\1\3\3\0"+
    "\21\3\23\0\4\3\1\0\2\3\1\164\2\3\1\0"+
    "\2\3\2\0\1\3\3\0\21\3\23\0\4\3\1\0"+
    "\1\165\4\3\1\0\2\3\2\0\1\3\3\0\12\3"+
    "\1\166\6\3\23\0\4\3\1\0\5\3\1\0\2\3"+
    "\2\0\1\3\3\0\11\3\1\167\7\3\23\0\4\3"+
    "\1\0\5\3\1\0\2\3\2\0\1\3\3\0\4\3"+
    "\1\170\14\3\23\0\4\3\1\0\5\3\1\0\2\3"+
    "\2\0\1\171\3\0\21\3\23\0\4\3\1\0\5\3"+
    "\1\0\2\3\2\0\1\3\3\0\16\3\1\172\2\3"+
    "\23\0\4\3\1\0\5\3\1\0\2\3\2\0\1\3"+
    "\3\0\14\3\1\173\4\3\23\0\4\3\1\0\5\3"+
    "\1\0\2\3\2\0\1\3\3\0\14\3\1\174\4\3"+
    "\23\0\4\3\1\0\5\3\1\0\2\3\2\0\1\3"+
    "\3\0\2\3\1\175\1\3\1\176\14\3\23\0\4\3"+
    "\1\0\5\3\1\0\2\3\2\0\1\3\3\0\7\3"+
    "\1\177\11\3\23\0\4\3\1\0\5\3\2\0\1\200"+
    "\65\0\2\3\2\0\1\3\3\0\2\3\1\201\16\3"+
    "\23\0\4\3\1\0\5\3\1\0\2\3\2\0\1\3"+
    "\3\0\10\3\1\202\10\3\23\0\4\3\1\0\5\3"+
    "\1\0\2\3\2\0\1\3\3\0\6\3\1\203\1\3"+
    "\1\204\10\3\23\0\4\3\1\0\5\3\1\0\2\3"+
    "\2\0\1\3\3\0\17\3\1\205\1\3\23\0\4\3"+
    "\1\0\5\3\1\0\2\3\2\0\1\3\3\0\1\206"+
    "\20\3\23\0\4\3\1\0\5\3\1\0\2\3\2\0"+
    "\1\3\3\0\10\3\1\207\1\3\1\210\6\3\23\0"+
    "\4\3\1\0\5\3\3\0\1\55\1\0\1\55\3\0"+
    "\1\55\1\0\1\55\4\0\1\55\1\0\1\55\45\0"+
    "\2\3\2\0\1\3\3\0\14\3\1\211\4\3\23\0"+
    "\4\3\1\0\5\3\1\0\2\3\2\0\1\3\3\0"+
    "\14\3\1\212\4\3\23\0\4\3\1\0\5\3\1\0"+
    "\2\3\2\0\1\3\3\0\3\3\1\213\15\3\23\0"+
    "\4\3\1\0\5\3\1\0\2\3\2\0\1\3\3\0"+
    "\12\3\1\214\6\3\23\0\4\3\1\0\5\3\1\0"+
    "\2\3\2\0\1\3\3\0\14\3\1\215\4\3\23\0"+
    "\4\3\1\0\5\3\1\0\2\3\2\0\1\3\3\0"+
    "\4\3\1\216\14\3\23\0\4\3\1\0\5\3\1\0"+
    "\2\3\2\0\1\3\3\0\11\3\1\217\7\3\23\0"+
    "\4\3\1\0\5\3\1\0\2\3\2\0\1\3\3\0"+
    "\21\3\23\0\1\3\1\220\2\3\1\0\5\3\1\0"+
    "\2\3\2\0\1\3\3\0\3\3\1\221\15\3\23\0"+
    "\4\3\1\0\5\3\1\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\222\15\3\23\0\4\3\1\0\5\3\1\0"+
    "\2\3\2\0\1\3\3\0\17\3\1\223\1\3\23\0"+
    "\4\3\1\0\5\3\1\0\2\3\2\0\1\3\3\0"+
    "\2\3\1\224\16\3\23\0\4\3\1\0\5\3\1\0"+
    "\2\3\2\0\1\3\3\0\7\3\1\225\11\3\23\0"+
    "\4\3\1\0\5\3\1\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\226\15\3\23\0\4\3\1\0\5\3\1\0"+
    "\2\3\2\0\1\3\3\0\2\3\1\227\16\3\23\0"+
    "\4\3\1\0\5\3\1\0\2\3\2\0\1\3\3\0"+
    "\16\3\1\230\2\3\23\0\4\3\1\0\5\3\1\0"+
    "\2\3\2\0\1\3\3\0\3\3\1\231\1\232\14\3"+
    "\14\0\1\233\6\0\4\3\1\0\5\3\1\0\2\3"+
    "\2\0\1\3\3\0\6\3\1\234\12\3\23\0\4\3"+
    "\1\0\5\3\1\0\2\3\2\0\1\3\3\0\12\3"+
    "\1\235\6\3\23\0\4\3\1\0\5\3\1\0\2\3"+
    "\2\0\1\3\3\0\13\3\1\236\5\3\23\0\4\3"+
    "\1\0\5\3\1\0\2\3\2\0\1\3\3\0\2\3"+
    "\1\237\16\3\23\0\4\3\1\0\5\3\1\0\2\3"+
    "\2\0\1\3\3\0\14\3\1\240\4\3\23\0\4\3"+
    "\1\0\5\3\1\0\2\3\2\0\1\3\3\0\1\241"+
    "\20\3\23\0\4\3\1\0\5\3\1\0\2\3\2\0"+
    "\1\3\3\0\7\3\1\242\11\3\23\0\4\3\1\0"+
    "\5\3\1\0\2\3\2\0\1\3\3\0\4\3\1\243"+
    "\14\3\23\0\4\3\1\0\5\3\1\0\2\3\2\0"+
    "\1\3\3\0\17\3\1\244\1\3\23\0\4\3\1\0"+
    "\5\3\1\0\2\3\2\0\1\3\3\0\3\3\1\245"+
    "\15\3\23\0\4\3\1\0\5\3\1\0\2\3\2\0"+
    "\1\3\3\0\10\3\1\246\10\3\23\0\4\3\1\0"+
    "\5\3\2\0\1\200\42\0\1\247\22\0\2\3\2\0"+
    "\1\3\3\0\5\3\1\250\13\3\23\0\4\3\1\0"+
    "\5\3\1\0\2\3\2\0\1\3\3\0\12\3\1\251"+
    "\6\3\23\0\4\3\1\0\5\3\1\0\2\3\2\0"+
    "\1\3\3\0\2\3\1\252\16\3\23\0\4\3\1\0"+
    "\5\3\1\0\2\3\2\0\1\3\3\0\21\3\23\0"+
    "\4\3\1\0\3\3\1\253\1\3\1\0\2\3\2\0"+
    "\1\3\3\0\21\3\23\0\4\3\1\0\1\3\1\254"+
    "\3\3\1\0\2\3\2\0\1\3\3\0\12\3\1\255"+
    "\6\3\23\0\4\3\1\0\5\3\1\0\2\3\2\0"+
    "\1\3\3\0\15\3\1\256\3\3\23\0\4\3\1\0"+
    "\5\3\1\0\2\3\2\0\1\3\3\0\14\3\1\257"+
    "\4\3\23\0\4\3\1\0\5\3\1\0\2\3\2\0"+
    "\1\3\3\0\12\3\1\260\6\3\23\0\4\3\1\0"+
    "\5\3\1\0\2\3\2\0\1\3\3\0\2\3\1\261"+
    "\16\3\23\0\4\3\1\0\5\3\1\0\2\3\2\0"+
    "\1\3\3\0\4\3\1\262\14\3\14\0\1\263\6\0"+
    "\4\3\1\0\5\3\1\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\264\15\3\23\0\4\3\1\0\5\3\1\0"+
    "\2\3\2\0\1\3\3\0\21\3\23\0\4\3\1\0"+
    "\1\3\1\265\3\3\1\0\2\3\2\0\1\3\3\0"+
    "\4\3\1\266\14\3\23\0\4\3\1\0\5\3\1\0"+
    "\2\3\2\0\1\3\3\0\21\3\23\0\4\3\1\267"+
    "\5\3\1\0\2\3\2\0\1\3\3\0\11\3\1\270"+
    "\7\3\23\0\4\3\1\0\5\3\1\0\2\3\2\0"+
    "\1\3\3\0\7\3\1\271\11\3\23\0\4\3\1\0"+
    "\5\3\1\0\2\3\2\0\1\3\3\0\10\3\1\272"+
    "\10\3\23\0\4\3\1\0\5\3\1\0\2\3\2\0"+
    "\1\3\3\0\2\3\1\273\16\3\23\0\4\3\1\0"+
    "\5\3\1\0\2\3\2\0\1\3\3\0\7\3\1\274"+
    "\11\3\23\0\4\3\1\0\5\3\1\0\2\3\2\0"+
    "\1\3\3\0\17\3\1\275\1\3\23\0\4\3\1\0"+
    "\5\3\1\0\2\3\2\0\1\3\3\0\7\3\1\276"+
    "\11\3\23\0\4\3\1\0\5\3\1\0\2\3\2\0"+
    "\1\3\3\0\7\3\1\277\11\3\23\0\4\3\1\0"+
    "\5\3\1\0\2\3\2\0\1\3\3\0\4\3\1\232"+
    "\14\3\14\0\1\233\6\0\4\3\1\0\5\3\47\0"+
    "\1\300\20\0\2\3\2\0\1\3\3\0\7\3\1\301"+
    "\11\3\23\0\4\3\1\0\5\3\1\0\2\3\2\0"+
    "\1\3\3\0\4\3\1\302\14\3\14\0\1\303\6\0"+
    "\4\3\1\0\5\3\1\0\2\3\2\0\1\3\3\0"+
    "\7\3\1\304\11\3\23\0\4\3\1\0\5\3\1\0"+
    "\2\3\2\0\1\3\3\0\16\3\1\305\2\3\23\0"+
    "\4\3\1\0\5\3\1\0\2\3\2\0\1\3\3\0"+
    "\12\3\1\306\6\3\23\0\4\3\1\0\5\3\1\0"+
    "\2\3\2\0\1\3\3\0\4\3\1\307\14\3\14\0"+
    "\1\310\6\0\4\3\1\0\5\3\1\0\2\3\2\0"+
    "\1\3\3\0\4\3\1\311\14\3\23\0\4\3\1\0"+
    "\5\3\1\0\2\3\2\0\1\3\3\0\5\3\1\312"+
    "\13\3\23\0\4\3\1\0\5\3\1\0\2\3\2\0"+
    "\1\3\3\0\11\3\1\313\7\3\23\0\4\3\1\0"+
    "\5\3\1\314\2\315\2\314\1\315\2\314\1\0\21\315"+
    "\23\314\4\315\1\314\5\315\1\0\2\3\2\0\1\3"+
    "\3\0\3\3\1\316\15\3\23\0\4\3\1\0\5\3"+
    "\1\0\2\3\2\0\1\3\3\0\3\3\1\317\15\3"+
    "\23\0\4\3\1\0\5\3\1\0\2\3\2\0\1\3"+
    "\3\0\14\3\1\320\4\3\23\0\4\3\1\0\5\3"+
    "\1\0\2\3\2\0\1\3\3\0\14\3\1\321\4\3"+
    "\23\0\4\3\1\0\5\3\1\0\2\3\2\0\1\3"+
    "\3\0\10\3\1\322\10\3\23\0\4\3\1\0\5\3"+
    "\1\0\2\3\2\0\1\3\3\0\2\3\1\323\16\3"+
    "\23\0\4\3\1\0\5\3\1\0\2\3\2\0\1\3"+
    "\3\0\12\3\1\324\6\3\23\0\4\3\1\0\5\3"+
    "\1\0\2\3\2\0\1\3\3\0\4\3\1\325\14\3"+
    "\14\0\1\326\6\0\4\3\1\0\5\3\47\0\1\327"+
    "\20\0\2\3\2\0\1\3\3\0\14\3\1\330\4\3"+
    "\23\0\4\3\1\0\5\3\1\0\2\3\2\0\1\3"+
    "\3\0\10\3\1\331\10\3\23\0\4\3\1\0\5\3"+
    "\21\0\1\332\46\0\2\3\2\0\1\3\3\0\15\3"+
    "\1\333\3\3\23\0\4\3\1\0\5\3\1\0\2\3"+
    "\2\0\1\3\3\0\6\3\1\334\12\3\23\0\4\3"+
    "\1\0\5\3\1\0\2\3\2\0\1\3\3\0\17\3"+
    "\1\335\1\3\23\0\4\3\1\0\5\3\1\0\2\3"+
    "\2\0\1\3\3\0\4\3\1\336\14\3\14\0\1\337"+
    "\6\0\4\3\1\0\5\3\1\0\2\3\2\0\1\3"+
    "\3\0\5\3\1\340\13\3\23\0\4\3\1\0\5\3"+
    "\1\0\2\3\2\0\1\3\3\0\11\3\1\341\7\3"+
    "\23\0\4\3\1\0\5\3\1\0\2\3\2\0\1\342"+
    "\3\0\21\3\23\0\4\3\1\0\5\3\46\0\1\343"+
    "\21\0\2\3\2\0\1\3\3\0\2\3\1\344\16\3"+
    "\23\0\4\3\1\0\5\3\47\0\1\345\20\0\2\3"+
    "\2\0\1\3\3\0\14\3\1\346\4\3\23\0\4\3"+
    "\1\0\5\3\1\0\2\3\2\0\1\3\3\0\12\3"+
    "\1\347\6\3\23\0\4\3\1\0\5\3\1\0\2\3"+
    "\2\0\1\3\3\0\3\3\1\350\15\3\23\0\4\3"+
    "\1\0\5\3\47\0\1\351\20\0\2\3\2\0\1\3"+
    "\3\0\13\3\1\352\5\3\23\0\4\3\1\0\5\3"+
    "\15\0\1\353\2\0\1\354\4\0\1\355\30\0\1\356"+
    "\11\0\2\3\2\0\1\3\3\0\4\3\1\357\2\3"+
    "\1\360\4\3\1\361\4\3\23\0\1\3\1\362\2\3"+
    "\1\0\5\3\1\0\2\3\2\0\1\3\3\0\17\3"+
    "\1\363\1\3\23\0\4\3\1\0\5\3\1\0\2\3"+
    "\2\0\1\3\3\0\2\3\1\364\16\3\23\0\4\3"+
    "\1\0\5\3\1\0\2\3\2\0\1\3\3\0\13\3"+
    "\1\365\5\3\23\0\4\3\1\0\5\3\1\0\2\3"+
    "\2\0\1\3\3\0\17\3\1\366\1\3\23\0\4\3"+
    "\1\0\5\3\1\0\2\3\2\0\1\3\3\0\10\3"+
    "\1\367\10\3\23\0\4\3\1\0\5\3\1\0\2\3"+
    "\2\0\1\3\3\0\1\3\1\370\17\3\23\0\4\3"+
    "\1\0\5\3\47\0\1\371\65\0\1\372\21\0\2\3"+
    "\2\0\1\3\3\0\11\3\1\373\7\3\23\0\4\3"+
    "\1\0\5\3\1\0\2\3\2\0\1\3\3\0\3\3"+
    "\1\374\15\3\23\0\4\3\1\0\5\3\5\0\1\375"+
    "\62\0\2\3\2\0\1\3\3\0\4\3\1\376\14\3"+
    "\23\0\4\3\1\0\5\3\1\0\2\3\2\0\1\3"+
    "\3\0\11\3\1\377\7\3\23\0\4\3\1\0\5\3"+
    "\47\0\1\u0100\20\0\2\3\2\0\1\3\3\0\14\3"+
    "\1\u0101\4\3\23\0\4\3\1\0\5\3\47\0\1\u0102"+
    "\65\0\1\u0103\21\0\2\3\2\0\1\3\3\0\17\3"+
    "\1\u0104\1\3\23\0\4\3\1\0\5\3\1\0\2\3"+
    "\2\0\1\3\3\0\2\3\1\u0105\16\3\23\0\4\3"+
    "\1\0\5\3\1\0\2\3\2\0\1\3\3\0\4\3"+
    "\1\u0106\14\3\14\0\1\u0107\6\0\4\3\1\0\5\3"+
    "\46\0\1\u0108\21\0\2\3\2\0\1\3\3\0\4\3"+
    "\1\u0109\14\3\14\0\1\u010a\6\0\4\3\1\0\5\3"+
    "\60\0\1\u010b\33\0\1\u010c\52\0\1\u010d\76\0\1\u010e"+
    "\3\0\1\u010f\42\0\2\3\2\0\1\3\3\0\21\3"+
    "\23\0\3\3\1\u0110\1\0\5\3\1\0\2\3\2\0"+
    "\1\3\3\0\14\3\1\u0111\4\3\23\0\4\3\1\0"+
    "\5\3\1\0\2\3\2\0\1\3\3\0\1\u0112\20\3"+
    "\23\0\4\3\1\0\5\3\1\0\2\3\2\0\1\3"+
    "\3\0\10\3\1\u0113\3\3\1\u0114\4\3\23\0\4\3"+
    "\1\0\5\3\1\0\2\3\2\0\1\3\3\0\2\3"+
    "\1\u0115\16\3\23\0\4\3\1\0\5\3\1\0\2\3"+
    "\2\0\1\3\3\0\3\3\1\u0116\15\3\23\0\4\3"+
    "\1\0\5\3\1\0\2\3\2\0\1\3\3\0\3\3"+
    "\1\u0117\15\3\23\0\4\3\1\0\5\3\1\0\2\3"+
    "\2\0\1\3\3\0\12\3\1\u0118\6\3\23\0\4\3"+
    "\1\0\5\3\46\0\1\u0119\67\0\1\u011a\20\0\2\3"+
    "\2\0\1\3\3\0\4\3\1\u011b\14\3\14\0\1\u011c"+
    "\6\0\4\3\1\0\5\3\1\0\2\3\2\0\1\3"+
    "\3\0\11\3\1\u011d\7\3\23\0\4\3\1\0\5\3"+
    "\1\0\2\3\2\0\1\3\3\0\10\3\1\u011e\10\3"+
    "\23\0\4\3\1\0\5\3\46\0\1\u011f\21\0\2\3"+
    "\2\0\1\3\3\0\17\3\1\u0120\1\3\23\0\4\3"+
    "\1\0\5\3\47\0\1\u0121\20\0\2\3\2\0\1\3"+
    "\3\0\2\3\1\u0122\16\3\23\0\4\3\1\0\5\3"+
    "\47\0\1\u0123\66\0\1\u0124\66\0\1\u0125\37\0\1\u0126"+
    "\70\0\1\u0127\61\0\1\u0128\73\0\1\u0129\123\0\1\u012a"+
    "\10\0\2\3\2\0\1\3\3\0\7\3\1\u012b\11\3"+
    "\23\0\4\3\1\0\5\3\1\0\2\3\2\0\1\3"+
    "\3\0\11\3\1\u012c\7\3\23\0\4\3\1\0\5\3"+
    "\1\0\2\3\2\0\1\3\3\0\4\3\1\u012d\14\3"+
    "\23\0\4\3\1\0\5\3\1\0\2\3\2\0\1\3"+
    "\3\0\11\3\1\u012e\7\3\23\0\4\3\1\0\5\3"+
    "\1\0\2\3\2\0\1\3\3\0\21\3\23\0\2\3"+
    "\1\u012f\1\3\1\0\5\3\1\0\2\3\2\0\1\3"+
    "\3\0\3\3\1\u0130\15\3\23\0\4\3\1\0\5\3"+
    "\1\0\2\3\2\0\1\3\3\0\3\3\1\u0131\15\3"+
    "\23\0\4\3\1\0\5\3\47\0\1\u0132\66\0\1\u0133"+
    "\20\0\2\3\2\0\1\3\3\0\2\3\1\u0134\16\3"+
    "\23\0\4\3\1\0\5\3\1\0\2\3\2\0\1\3"+
    "\3\0\21\3\23\0\4\3\1\0\4\3\1\u0135\47\0"+
    "\1\u0136\20\0\2\3\2\0\1\3\3\0\3\3\1\u0137"+
    "\15\3\23\0\4\3\1\0\5\3\46\0\1\u0138\66\0"+
    "\1\u0139\33\0\1\u013a\101\0\1\u013b\41\0\2\3\2\0"+
    "\1\3\3\0\2\3\1\u013c\16\3\23\0\4\3\1\0"+
    "\5\3\1\0\2\3\2\0\1\3\3\0\15\3\1\u013d"+
    "\3\3\23\0\4\3\1\0\5\3\1\0\2\3\2\0"+
    "\1\3\3\0\15\3\1\u013e\3\3\23\0\4\3\1\0"+
    "\5\3\46\0\1\u013f\21\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\u0140\15\3\23\0\4\3\1\0\5\3\47\0"+
    "\1\u0141\66\0\1\u0142\36\0\1\u0143\50\0\2\3\2\0"+
    "\1\3\3\0\6\3\1\u0144\12\3\23\0\4\3\1\0"+
    "\5\3\47\0\1\u0145\20\0\2\3\2\0\1\3\3\0"+
    "\15\3\1\u0146\3\3\23\0\4\3\1\0\5\3\56\0"+
    "\1\u0147\11\0\2\3\2\0\1\3\3\0\21\3\23\0"+
    "\1\3\1\u0148\2\3\1\0\5\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13530];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\16\1\2\11\7\1\10\11"+
    "\4\1\1\0\1\11\1\0\37\1\12\11\1\0\6\1"+
    "\1\0\37\1\1\0\32\1\1\0\13\1\1\11\13\1"+
    "\1\0\3\1\1\0\13\1\1\0\4\1\1\0\3\1"+
    "\1\0\11\1\1\0\3\1\1\0\4\1\1\0\3\1"+
    "\1\0\7\1\4\0\13\1\1\0\2\1\1\11\4\1"+
    "\1\11\1\0\3\1\2\0\1\1\6\0\11\1\1\0"+
    "\1\11\1\1\1\0\2\1\1\0\1\1\1\11\2\1"+
    "\1\11\1\1\2\0\3\11\7\1\1\11\3\1\1\11"+
    "\1\1\2\0\1\11\1\0\3\1\1\0\1\1\2\11"+
    "\1\0\1\1\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexema;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 100: 
          { lexema = yytext(); return MetodoRandom;
          }
        case 101: break;
        case 61: 
          { lexema = yytext(); return Switch;
          }
        case 102: break;
        case 53: 
          { lexema = yytext(); return Short;
          }
        case 103: break;
        case 94: 
          { lexema = yytext(); return MetodoSqrt;
          }
        case 104: break;
        case 84: 
          { lexema = yytext(); return ArregloString;
          }
        case 105: break;
        case 9: 
          { lexema = yytext(); return Multiplicacion;
          }
        case 106: break;
        case 20: 
          { lexema = yytext(); return LlaveCerrada;
          }
        case 107: break;
        case 87: 
          { lexema = yytext(); return MetodoMax;
          }
        case 108: break;
        case 24: 
          { lexema = yytext(); return ContenidoDeString;
          }
        case 109: break;
        case 46: 
          { lexema = yytext(); return Long;
          }
        case 110: break;
        case 45: 
          { lexema = yytext(); return Null;
          }
        case 111: break;
        case 58: 
          { lexema = yytext(); return While;
          }
        case 112: break;
        case 16: 
          { lexema = yytext(); return ParentesisCerrado;
          }
        case 113: break;
        case 97: 
          { lexema = yytext(); return ArregloMultString;
          }
        case 114: break;
        case 25: 
          { lexema = yytext(); return If;
          }
        case 115: break;
        case 81: 
          { lexema = yytext(); return Abstract;
          }
        case 116: break;
        case 28: 
          { lexema = yytext(); return Adicion;
          }
        case 117: break;
        case 69: 
          { lexema = yytext(); return Finally;
          }
        case 118: break;
        case 95: 
          { lexema = yytext(); return Protected;
          }
        case 119: break;
        case 77: 
          { lexema = yytext(); return Private;
          }
        case 120: break;
        case 71: 
          { lexema = yytext(); return Boolean;
          }
        case 121: break;
        case 43: 
          { lexema = yytext(); return Enum;
          }
        case 122: break;
        case 18: 
          { lexema = yytext(); return CorcheteCerrado;
          }
        case 123: break;
        case 2: 
          { lexema = yytext(); return Identificador;
          }
        case 124: break;
        case 36: 
          { lexema = yytext(); return OperadorOR;
          }
        case 125: break;
        case 52: 
          { lexema = yytext(); return Break;
          }
        case 126: break;
        case 4: 
          { /*Ignore*/
          }
        case 127: break;
        case 47: 
          { lexema = yytext(); return Char;
          }
        case 128: break;
        case 5: 
          { lexema = yytext(); return Division;
          }
        case 129: break;
        case 89: 
          { lexema = yytext(); return ArregloMultFloat;
          }
        case 130: break;
        case 35: 
          { lexema = yytext(); return OperadorAND;
          }
        case 131: break;
        case 90: 
          { lexema = yytext(); return ArregloBoolean;
          }
        case 132: break;
        case 23: 
          { lexema = yytext(); return DosPuntos;
          }
        case 133: break;
        case 75: 
          { lexema = yytext(); return ArregloMultInt;
          }
        case 134: break;
        case 40: 
          { lexema = yytext(); return New;
          }
        case 135: break;
        case 88: 
          { lexema = yytext(); return Volatile;
          }
        case 136: break;
        case 55: 
          { lexema = yytext(); return ArregloInt;
          }
        case 137: break;
        case 54: 
          { lexema = yytext(); return Super;
          }
        case 138: break;
        case 63: 
          { lexema = yytext(); return Import;
          }
        case 139: break;
        case 41: 
          { lexema = yytext(); return Byte;
          }
        case 140: break;
        case 1: 
          { return ERROR;
          }
        case 141: break;
        case 39: 
          { lexema = yytext(); return Int;
          }
        case 142: break;
        case 67: 
          { lexema = yytext(); return String;
          }
        case 143: break;
        case 57: 
          { lexema = yytext(); return Catch;
          }
        case 144: break;
        case 27: 
          { lexema = yytext(); return Incremento;
          }
        case 145: break;
        case 73: 
          { lexema = yytext(); return Extends;
          }
        case 146: break;
        case 86: 
          { lexema = yytext(); return MetodoMin;
          }
        case 147: break;
        case 10: 
          { lexema = yytext(); return Modulo;
          }
        case 148: break;
        case 32: 
          { lexema = yytext(); return DiferenteDe;
          }
        case 149: break;
        case 93: 
          { lexema = yytext(); return Interface;
          }
        case 150: break;
        case 80: 
          { lexema = yytext(); return ArregloMultLong;
          }
        case 151: break;
        case 44: 
          { lexema = yytext(); return Else;
          }
        case 152: break;
        case 92: 
          { lexema = yytext(); return ArregloMultShort;
          }
        case 153: break;
        case 56: 
          { lexema = yytext(); return Class;
          }
        case 154: break;
        case 85: 
          { lexema = yytext(); return MetodoAbs;
          }
        case 155: break;
        case 98: 
          { lexema = yytext(); return ArregloMultBoolean;
          }
        case 156: break;
        case 82: 
          { lexema = yytext(); return ArregloDouble;
          }
        case 157: break;
        case 99: 
          { lexema = yytext(); return Syncronized;
          }
        case 158: break;
        case 8: 
          { lexema = yytext(); return Resta;
          }
        case 159: break;
        case 31: 
          { lexema = yytext(); return IgualA;
          }
        case 160: break;
        case 48: 
          { lexema = yytext(); return Case;
          }
        case 161: break;
        case 64: 
          { lexema = yytext(); return ArregloLong;
          }
        case 162: break;
        case 37: 
          { lexema = yytext(); return For;
          }
        case 163: break;
        case 91: 
          { lexema = yytext(); return Transient;
          }
        case 164: break;
        case 42: 
          { lexema = yytext(); return This;
          }
        case 165: break;
        case 50: 
          { lexema = yytext(); return Final;
          }
        case 166: break;
        case 83: 
          { lexema = yytext(); return ArregloMultChar;
          }
        case 167: break;
        case 11: 
          { lexema = yytext(); return Igual;
          }
        case 168: break;
        case 96: 
          { lexema = yytext(); return ArregloMultDouble;
          }
        case 169: break;
        case 19: 
          { lexema = yytext(); return LlaveAbierta;
          }
        case 170: break;
        case 70: 
          { lexema = yytext(); return ArregloFloat;
          }
        case 171: break;
        case 29: 
          { lexema = yytext(); return Decremento;
          }
        case 172: break;
        case 72: 
          { lexema = yytext(); return ElseIf;
          }
        case 173: break;
        case 60: 
          { lexema = yytext(); return Static;
          }
        case 174: break;
        case 76: 
          { lexema = yytext(); return Default;
          }
        case 175: break;
        case 66: 
          { lexema = yytext(); return ArregloChar;
          }
        case 176: break;
        case 38: 
          { lexema = yytext(); return Try;
          }
        case 177: break;
        case 15: 
          { lexema = yytext(); return ParentesisAbierto;
          }
        case 178: break;
        case 78: 
          { lexema = yytext(); return Package;
          }
        case 179: break;
        case 6: 
          { lexema = yytext(); return SaltoLinea;
          }
        case 180: break;
        case 51: 
          { lexema = yytext(); return Float;
          }
        case 181: break;
        case 79: 
          { lexema = yytext(); return ArregloMultByte;
          }
        case 182: break;
        case 14: 
          { lexema = yytext(); return MenorQue;
          }
        case 183: break;
        case 17: 
          { lexema = yytext(); return CorcheteAbierto;
          }
        case 184: break;
        case 22: 
          { lexema = yytext(); return Punto;
          }
        case 185: break;
        case 3: 
          { lexema = yytext(); return Numero;
          }
        case 186: break;
        case 49: 
          { lexema = yytext(); return Void;
          }
        case 187: break;
        case 26: 
          { lexema = yytext(); return Do;
          }
        case 188: break;
        case 59: 
          { lexema = yytext(); return ArregloByte;
          }
        case 189: break;
        case 13: 
          { lexema = yytext(); return MayorQue;
          }
        case 190: break;
        case 65: 
          { lexema = yytext(); return Double;
          }
        case 191: break;
        case 34: 
          { lexema = yytext(); return MenorIgual;
          }
        case 192: break;
        case 74: 
          { lexema = yytext(); return ArregloShort;
          }
        case 193: break;
        case 30: 
          { lexema = yytext(); return Substraccion;
          }
        case 194: break;
        case 7: 
          { lexema = yytext(); return Suma;
          }
        case 195: break;
        case 68: 
          { lexema = yytext(); return Public;
          }
        case 196: break;
        case 21: 
          { lexema = yytext(); return PuntoYComa;
          }
        case 197: break;
        case 62: 
          { lexema = yytext(); return Return;
          }
        case 198: break;
        case 33: 
          { lexema = yytext(); return MayorIgual;
          }
        case 199: break;
        case 12: 
          { lexema = yytext(); return OperadorNOT;
          }
        case 200: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
